/******************************************************************************
		File Name	: globalValidator.js		
		Track		: FRAMEWORK
		Functional	: GLOBAL
		Description : Javascript Validation functions used GLOBALLY
		Function List:	function getLabel(elem)
						function alertMe()
						function formulateMessage(msg, argsArr)
						function getOccurences(str, charac)
						function getErrorMessage(errCode)
						function parseFunctionName(func)
						function preValidate(inputForm) 
						function validateForm(thisForm)
						function enableAllFields(frm) 
						function isDataComplete(field) 
						function isAlphaNumericSpecialChar()
						function isAlphaNum()
						function isDigit (c)  
						function isInteger (s)   
						function isAlphaChar(c)
						function isAlphaNumericData(field,val)
						function doTrim(val) 
						function advance(thisField, nextField) 
						function formatDate(field1, field2, field3, targetField)
						function getMonthNumber(month) 
						function clearMonthDayYear(field) 
						function openPopupWindow(theURL,winName,features)  //v2.0
						function setFocus(field)
						function doSubmit(formName, field, val) 
						function submitForm(formId)
						function doReset(formName)
						function setSelectFlag() 
						function setSelectFlagFalse()
						function toCaps(field) 
						function trimSpaces(obj)
						function CompareAlpha(a, b) 
						function CompareAlphaIgnore(a, b) 
						function CompareDate(a, b) 
						function CompareDateEuro(a, b) 
						function CompareNumeric(a, b) 
						function changeImage(table,colNo)
						function sortTable(table,colNo)
						function refreshSort(table)
						function sortData(table,colNo,dataType,isSortDesc)
						function changeImageById(table,tableNo,colNo)
						function openCloseWindow() 
						function setLogout()
						function addList(txt, val, listObj)
						function isOptionExists(elem, val)
						function disableElements(flag,oids)
						function disableFieldsOnSpace()						
						function disableFieldsOnYes()
						function disableFieldsOnNo()
						function clearFields()
						function uncheckGroup(chk){						
						function enableFieldsOnSpace()
						function enableFieldsOnYes()
						function enableFieldsOnNo()
						function getRadioButtonValue (radio)   
						function displayMessages(errorMessage,message) 
						function resetElement(elem) 
						function runValidations(thisForm)
						function setActionFieldAndSubmit(frm,value,validate)   
						function initScrollTable(oElement) 
						function resizeScrollTable(oElement) 
						function openModalDialog(URL,winName,features)
						function setFieldValue(field,val)
						function selVal(selfield,hidCombo1,filteredCombo,hidCombo2)
						function clearMessages()
						function getLinkByID(tab)
						function getListText(valu,selobj)
						function resetInnerHTML()
						function disableAddr()
						function getToday()
						function textAreaEnter()
						function textAreaBreak(tArea)
						function replaceTilda(tArea)
						function validateDates(month,day,year)
						function createErrorMessages(month,day,year)
						function checkZip(field1,field2)
						function formDate(aDate,aTime,tgt)
						function setFocusOnFirstField()
						function getDefaultValues(elem)
						function setCheckBoxValue(selectedCheckbox)
						function getCheckBoxValue(selectedCheckbox)
						function getElementValueOrValue(elem)
						function preValidateElements(elemIDArray)
						function validateElements(elemIDArray)
						function prepareElementRequestParams(elementIds)
						function prepareFormRequestParams(frm)
						function setFormTarget(frm,val)
						function setAllFirstCaps(frmObj)
						function isGroupChecked(grpElem, chkNum)
						function setDateValue(beanId, dateVal)
						function setSelected(combo,val)
						function isCompleteForm(thisfrm)
						function getMandatoryFields(frm)
						function getElementValidations(elem)
						function addtoUniqueElementArray(arrObj,valtoAdd)
						function setKeyValues(keys,vals)
						function uppercase()
						function warnOnDelete(frm,act,val)
						function confirmAction(msg)
						function handleKeyPress()
						function setFocusonMessages()
						function pauseExecution(timeDelay)
						function isData(field)
						function alertMeDynaSection()
						function getErrorMessageOrSeverity(errCode)
						function getImageForMessage(severity,cde)
						function extractElementIdFromField(args)
						function displayDynaSectionMessages(errorMessage)
						function dynaSectionDelete(deleteFld,sectionCounter,pageAction,validateFlag)
						function getArrayOfFieldsStartingWith(str)
						function getHandleToField(startsWith,key)
						function getKeyFromField(field)
						//To Display the warning message before close the browser
						function confirmClose()
						//To identify the window is a popup or normal window
						function isPopup()
/****************************************************************************************/

/****************************************************************************************/
var isValidateON = false;			//Global flag that denotes whether validateForm is ON or OFF
var validationErrors = new Array();	//Global Array that holds all the error messages during submit validations
var glInnerHTMLArray = new Array(); //GLobal Array that holds the values of innerHTMLs
var glInnerHTMLIDArray = new Array();//GLobal Array that holds the values of innerHTML IDs
var overrideResults = false;//Global value that will be set to true when user clicks on Override Results in Eligibility screens
var dateVal = false;
var selectFlag=false;
var loginwarn = true;
var frmTarget = "";//Global variable to capture the target of the form
var errImg = "<IMG SRC='/access/images/icon_error.gif' ALT='/images/icon_error.gif' WIDTH='17' HEIGHT='17' VSPACE='2' ALIGN='absmiddle'> &nbsp;";	
var warningImg 	= "<IMG SRC='/access/images/icon_warning.gif' ALT='Warning' WIDTH='17' HEIGHT='17' VSPACE='2' ALIGN='absmiddle'> &nbsp;";	
var messageImg 	= "<IMG SRC='/access/images/icon_message.gif' ALT='Error' WIDTH='17' HEIGHT='17' VSPACE='2' ALIGN='absmiddle'> &nbsp;";
var successImg 	= "<IMG SRC='/access/images/icon_warning green.gif' ALT='Success' WIDTH='17' HEIGHT='17' VSPACE='2' ALIGN='absmiddle'> &nbsp;";	
var errorElementIdArray = new Array();
var preValidateAlwaysArray = new Array();
var pageSubmit = false;//Global variable to capture the page submit, either on hit of enter or onclick of a button.
var timer = "";
/*****************************************************************************************/
function getLabel(elem){
	if(elem.type==null||elem.type=="undefined"){
		return elem;
	}
	else{
		var lbl="";
		var lblname = elem.lblDesc;
		if(lblname==null||lbl=="undefined"){
			lbl = elem.name;
		}
		else{
			lbl = lblname;
		}
		return lbl;
	}
}

function alertMe(){
	var args = alertMe.arguments;
	var errMsg = getErrorMessage(args[0]);
	if(errMsg.indexOf("~")>=0){
		var msg = formulateMessage(errMsg, args);
		errMsg = msg;
	}		
	if(args[0]==errMsg){		
		//If the call does not contain any Error code or if
		// the error code is not defined.
		var tmp = "Error Code Not Defined "+args[0];
			if(isValidateON){
				validationErrors.push(tmp);		
			}else{
				displayMessages(tmp);
			}	
	}
	else{
		if(isValidateON){
			validationErrors.push(" "+errMsg);		
		}else{
			displayMessages(errImg+" "+errMsg);
		}	
	}
	setFocusonMessages();
	return true;
}

function formulateMessage(msg, argsArr){
	if(argsArr.length<=1){
		return msg;
	}
	else{
		var plHold = getOccurences(msg,'~');
		var argsLen = parseInt(argsArr.length,10);
		var plArgsLen = argsLen-1;
		var valn1 = (plArgsLen==plHold);
		if(valn1){
			var retMsg = "";
			var cnt=1;
			for(k=0;k<msg.length;k++){
				if(msg.charAt(k)=='~'){
					var lbl = getLabel(argsArr[cnt]);
					retMsg=retMsg+lbl;
					cnt = cnt+1;
				}
				else{
					retMsg = retMsg+msg.charAt(k);
				}
			}
			return retMsg;
		}
		else {			
			return msg;
		}
	}
}

function getOccurences(str, charac){
	var cnnt = 0;
	for(h=0;h<str.length;h++){
		if(str.charAt(h)==charac){
			cnnt = cnnt+1;
		}
	}
	return cnnt;
}


function getErrorMessage(errCode){
	var errArray;
	var desc = errCode;
	var temp = errCode.substring(0,2);
	temp = temp.toLowerCase();
	try{
		errArray = eval(temp+"ErrorCodes");
	}catch(e){
		return errCode;
	}		
	for(j=0;j<errArray.length;j++){
		if(errArray[j][0]==errCode){
			desc = errArray[j][1];
			break;
		}
	}
	return desc;
}

function parseFunctionName(func){
	if(func.indexOf("~")>=0){//Specially for DC
		pos0 = 0;
		pos1 = func.indexOf("(");
		pos2 = func.indexOf("~");
		temp1 = func.substring(0,pos1+1);
		temp2 = func.substring(pos2+1,func.length);
		temp = temp1+temp2;		
		return temp;
	}
	else{	// Standard calls
		return func;
	}
}


/*
 * This function is used to submit the form if there are no client side errors
 * If you do not want this function to submit the form pass the form and  0 
 * ie., preValidate(frm,0)
 */


function preValidate(inputForm) {
	messageArray = new Array();
	messageString = "";
	var args = preValidate.arguments;
	clearMessages();
	var ret = validateForm(inputForm);

	len = validationErrors.length;
	if(ret)  {		    
		if(args.length>1&&args[1]==0){
			return true;
		}		
		enableAllFields(inputForm);
		inputForm.method = "POST";
		pageSubmit = true;
	    return true;
	}
	else 
	{
		var num = inputForm.length;	
		for(var i = 0; i<num; i++){
			var field = inputForm.elements[i];
			var name = field.name;
			var aType = field.type;
			if(aType == "textarea"){
				replaceTilda(field);
			}
		}
	  	if(len>0) {
	  	  for(i=0;i<len;i++)  {	        
		      messageArray.push(validationErrors[i]);
			}
			errorString = messageArray.join("<BR>"+errImg);
						
			displayMessages(errorString);
	   	}	 
   	 
	    return false;
	}
}

/*
 * This function is used to validate the client side errors
 */

function validateForm(thisForm){
	var num = thisForm.length;	
	isValidateON = true;
	validationErrors = new Array();
	var chek = true;	
	var ret;
	for(var i = 0; i<num; i++){
		var field = thisForm.elements[i];
		var name = field.name;
		var validate=field.validate;	
		if ((validate !=null) && (validate!="undefined")&&(validate!="null")){			
			var startPos;
			do{
				startPos=0;
				var fun;
				var endPos=validate.indexOf(";");
				if(endPos > 0){
					fun=validate.substring(startPos,endPos);				
					startPos=endPos+1;
					validate=validate.substring(startPos,validate.length);						
				}else{
					fun=validate;
				}
				var spcs = doTrim(fun);		
				if(spcs!=null&&spcs!="null"&&spcs!=""){
					var netfunc = parseFunctionName(fun);				
					ret=eval(netfunc);				
					if(ret!=null&&ret!="null"&&ret!="undefined"&&!ret) {						
						chek = false;
					}// 
				}				
			}while(endPos != -1);
		}
	}
	isValidateON = false;		
	return chek;
  }
//This function is used if certian fields have been disabled on the page and the name/value pair has to sent to the server side.
function  enableAllFields(frm) {
	if(overrideResults == true) 
	{
	}
	else
	{
		for(var i=0; i< frm.length; i++){
			frm.elements[i].disabled= false;
		}
	}
}

//Function to check for mandatory fields - without popping the alerts
function isDataComplete(field) {
	if(field.type =="radio" || field.type =="checkbox"){
   	 	if(field.checked == true){
   	 		return true;
   	 	}
   	 	else return false;
   	}
	else
	{
    var val = field.value;  
    var thisval = null;
    if (val!=null) {
	   var vallen= val.length;
	   thisval = doTrim(val);	
	   if (thisval== null) {
	     thisvallen = 0;
	   } else {thisvallen = thisval.length;}
	   if (vallen >0 & thisvallen<=0) {	      
	     return false;
	   }
	} else {
		thisval = val;
	}
   if (thisval==null || thisval.length<=0) {
      return false; 
   }
   return true;
   }
}

//This function takes 2 arguments - first is a field name and the next is a 'SpecialChar'
//Checks to see that the value entered is AlphaNumeric or 'SpecialChar'
function isAlphaNumericSpecialChar(){
	var val = arguments[0].value;
	var specialChar = arguments[1];
	for (var i = 0; i < val.length; i++) {
		var ch = val.substring(i, i + 1);
		if (ch != specialChar && !isAlphaNum(ch,arguments[1])){
			//arguments[0].focus();
			return false;
		}
	}
}

/*
This function takes 2 arguments - first is a 'SingleChar' and the next is a 'SpecialChar'
Checks to see that the char entered is AlphaNumeric or 'SpecialChar'
Function is called by isAlphaNumericSpecialChar()
*/
function isAlphaNum(){
	var val = arguments[0];
	if(val < "0" || val > "9"){
		if (val < "a" || val > "z"){
			if (val < "A" || val > "Z"){
				return false;
			}
   		}
   	}
   	return true;
}	

/*
Function to check if the given character is a Digit or not
param1		: the character that needs to be checked.
returns		:  true  - if it is a Digit
			   false - if it is not a digit
*/
	function isDigit (c){  
		return ((c >= "0") && (c <= "9"))
	}
	
/*
Function to Return true if all characters in string s are numbers.
param1		: The String that needs to be validated
returns		: true -if value contains only numbers;
			  false -if a non-numeric charecter is found.
*/
	function isInteger (s){   
		for (i = 0; i < s.length; i++)
		{           
			var c = s.charAt(i);
			if (!isDigit(c)) return false;
		}    
		return true;
	}


/*
//Function checks if the char passed is a Capital Alpha char
*/
function isAlphaChar(c){
	 return ((c >= "A" && c <= "Z") || (c >= "a" && c <= "z"))
}

//Function to check if the given value is Alphanumeric
function isAlphaNumericData(field,val) {
  	var rep2 = /[A-Za-z0-9]+([a-z]|[0-9])*\s*[A-Za-z0-9]*/;
  	var rep = /[^A-Za-z0-9\s]+/;
  	var test = val.match(rep);
  	var test2 = val.match(rep2);
  	var leng = val.length;

	for(var i=0;i<leng;i++){
		if(val.charAt(0)== " "){
  	    	val= val.substring(1);
  	    }
  	}
  	field.value=val;
	if ((test == null) && (test2!=null) && (val.charAt(0)!= " ") && val.charAt(leng-1) !== " ") {       
		return true; 
  	} else { 
    	return false;
  	}
}


//Trims the spaces from the value being sent
function doTrim(val) {
	var len = val.length;
	var result = null;
   	for (var i=0;i<len;i++) {
   	var curchar = val.charAt(i);
		if (curchar!=" ") {
	   		if (result == null) {
	     		result = curchar;
	   		} else {
	     		result = result + curchar;
	   		}	   
	 	}
   	}
   return result;
}

/* Calling this method from the onKeyUp event select the nextField as soon as the user enters the final character in this
// field, however shift+tab is disabled.  Calling it from onKeyPress selects the nextField after the user exceeds the 
//	maxLength attribute.
*/ 

function advance(thisField, nextField) {
	var val = thisField.value;
  	var code=event.keyCode;
	var length = thisField.value.length;
	var maxxed = thisField.maxLength;
  
  	if(code==16 || code==9 || code==37 || code==39 || code==8) return;
  	if (selectFlag) {
		thisField.value = '';
		setFocus(thisField);
		selectFlag=false;
		return;
	}
	if(length==maxxed){
		setFocus(nextField);
		nextField.select();
		selectFlag=false;
		//clearMonthDayYear(nextField);
	}
}	

// This function formats a date (passed as three fields) into one hidden field using the format "yyyy-mm-dd"
//and also validates the date
function formatDate(field1, field2, field3, targetField){
	var value1 = field1.value;
	var value2 = field2.value;
	var value3 = field3.value;
	var args = formatDate.arguments;

	if((value1==null && value2==null && value3==null) || (value1=="mm" && (value2=="dd" ||value2=="disableDay") && value3=="yyyy") || (value1=="" && ( value2=="" || value2=="disableDay") && value3=="")){
		targetField.value="";
		return true;
	}
	if(value2=="disableDay") value2="01";
	if(validateDate(field1,field2,field3)==false) return false;
	if(value1.length==1) value1 ="0"+value1;
	if(value2.length==1) value2 ="0"+value2;
	
	if(args.length > 4 && arguments[4]!= null && arguments[4] == "true"){
		targetField.value = value1+value2+value3;
	}
	else
	{
		targetField.value = value3+"-"+value1+"-"+value2;
	}
	return true;
}

//This function is used by function validateDate() to get the month numbers 
function getMonthNumber(month) {
	var retval = 0;
	if (month == "Jan") {
		retval = 1;
	} else if (month == "Feb") {
    	retval = 2;
	} else if (month == "Mar") {
    	retval = 3;
	} else if (month == "Apr") {
    	retval = 4;
	} else if (month == "May") {
    	retval = 5;
	} else if (month == "Jun") {
    	retval = 6;
	} else if (month == "Jul") {
    	retval = 7;
	} else if (month == "Aug") {
    	retval = 8;
	} else if (month == "Sep") {
    	retval = 9;
	} else if (month == "Oct") {
    	retval = 10;
	} else if (month == "Nov") {
    	retval = 11;
	} else if (month == "Dec") {
    	retval = 12;
	}
	return retval;
}

//Clears the field if it is a Date field
function clearMonthDayYear(field) {
	if(event.keyCode==8) return true;
 	var thisValue = field.value;
	if(selectFlag || thisValue=="mm" || thisValue=="dd" || thisValue=="yyyy"){
   		field.value = '';
   		selectFlag=false;
	}
}

//Function used to open a pop up window - given the required parameters
function openPopupWindow(theURL,winName,features) { //v2.0
  var win = window.open(theURL,winName,features);
  //added to give focus to pop-up window, in case a window with the same name
  //is already open
  win.focus();
  return win;
}

//Function used to setFocus on a given field - returns true if the field is disabled - Comment added by Malathi 
function setFocus(field){
	if(field == "undefined") return;
	try{
		if(field.disabled) return;
			field.focus();
	}catch(e) {}
}

//Sets value to the field and then submits the form
function doSubmit(formName, field, val) {
	field.value = val;	
	return preValidate(formName);
}

//Function used to submit the form
function submitForm(frm){
frm.method = "POST";
frm.submit();
}



//Sets the value of 'selectFlag' to true
//In date fields if values mm/dd is available then it will clear the fields and not advance to the next field
function setSelectFlag() {
selectFlag=true;
}

//Function to set the selectFlag as false
function setSelectFlagFalse() {
selectFlag=false;
}

//Function to convert the field value to Upper Case
function toCaps(field) {
	field.value = (new String(field.value)).toUpperCase();
}

//Function to remove the leading and trailing spaces
function trimSpaces(obj){
	while(''+obj.value.charAt(obj.value.length-1)==' ')obj.value=obj.value.substring(0,obj.value.length-1);
	while(''+obj.value.charAt(0)==' ')obj.value=obj.value.substring(1,obj.value.length);
}

// Sorting functions - start
currentCol = 0
previousCol = -1

function CompareAlpha(a, b) {
	if (a[currentCol] < b[currentCol]) { return -1; }
	if (a[currentCol] > b[currentCol]) { return 1; }
	return 0;
}

function CompareAlphaIgnore(a, b) {
	strA = a[currentCol].toLowerCase();
	strB = b[currentCol].toLowerCase();
	if (strA < strB) { return -1; }
	else {
		if (strA > strB) { return 1; }
		else { return 0; }
	}
}

function CompareDate(a, b) {
	datA = new Date(a[currentCol]);
	datB = new Date(b[currentCol]);
	
	if(isNaN(datA) && isNaN(datB))return 0;
	else if(isNaN(datA)) return -1;
	else if(isNaN(datB)) return 1;
	
	if (datA < datB) { return -1; }
	else {
		if (datA > datB) { return 1; }
		else { return 0; }
	}
}

function CompareDateEuro(a, b) {
	strA = a[currentCol].split(".");
	strB = b[currentCol].split(".")
	datA = new Date(strA[2], strA[1], strA[0]);
	datB = new Date(strB[2], strB[1], strB[0]);
	if (datA < datB) { return -1; }
	else {
		if (datA > datB) { return 1; }
		else { return 0; }
	}
}

function CompareNumeric(a, b) {
	numA = a[currentCol]
	numB = b[currentCol]
	if(isNaN(numA) && isNaN(numB))return 0;
	else if(isNaN(numA)) return -1;
	else if(isNaN(numB)) return 1;
	else return (numA - numB);
}

function changeImage(table,colNo){
	var cols=table.rows(0).cells.length;
	var currImg="document.sortImage"+colNo+".src";
	var imgSrc=eval(currImg);
	var otherImg;
	var imgName;
	var isDesc=false;
	var pos=imgSrc.lastIndexOf("/");
	
	imgName=imgSrc.substring(pos+1,imgSrc.length);
	if(imgName=="bulletUnselected.gif"){
		imgSrc="/images/bulletRotated.gif";
	}else if(imgName=="bulletRotated.gif"){
		isDesc=true;
		imgSrc="/images/bulletDescending.gif";
	}else if(imgName=="bulletDescending.gif"){
		imgSrc="/images/bulletRotated.gif";
	}
	eval(currImg+"='"+imgSrc+"'");
	
	if(previousCol >=0 && previousCol!=colNo){
		otherImg="document.sortImage"+previousCol+".src='/images/bulletUnselected.gif'";
		eval(otherImg);
	}
	return isDesc;
}

function sortTable(table,colNo){
	var rowCount;
	var colCount;
	var isSortDesc=false;
	if(table!=null){
		rowCount=table.rows.length;
		if(rowCount <=0 || rowCount > 100) return false;

		colCount = table.rows(0).cells.length;
		if(colCount <=0 || colNo >=colCount) return false;

		isSortDesc=changeImage(table,colNo);
		dataType=eval("document.sortImage"+colNo+".dataType");
		
		sortData(table,colNo,dataType,isSortDesc);
	}
	return false;
}

function refreshSort(table){
	var colCount;
	var rowCount;
	
	rowCount=table.rows.length;
	if(rowCount <=0) return false;
	
	colCount = table.rows(0).cells.length;
	if(colCount <=0) return false;
	
	var currImg;
	var imgSrc;
	var pos;
	var imgName;
	var dataType;
	var isDesc=false;
	
	for(i=0;i < colCount;i++){
		if(eval("parent.document.sortImage"+i) !="[object]") continue;
		
		currImg="parent.document.sortImage"+i+".src";
		imgSrc=eval(currImg);
		pos=imgSrc.lastIndexOf("/");
		imgName=imgSrc.substring(pos+1,imgSrc.length);
		if(imgName=="bulletUnselected.gif"){
			continue;
		}else if(imgName=="bulletDescending.gif"){
			isDesc=true;
		}
		dataType=eval("parent.document.sortImage"+i+".dataType");
		sortData(table,i,dataType,isDesc);
		break;
	}
	return;
}

function sortData(table,colNo,dataType,isSortDesc){
	var rowCount;
	var colCount;
	var bArray;
	var oldIndex;
	var bSort;

	rowCount=table.rows.length;
	if(rowCount <=0) return false;

	colCount = table.rows(0).cells.length;
	if(colCount <=0 || colNo >=colCount) return false;
	
	bArray=new Array();
	oldIndex = new Array();
	bSort = false;
	
	currentCol = colNo;
	sortArray = new Array(rowCount);
	htmlArray=new Array(rowCount);

	
	for (i=0; i < rowCount; i++) {
		sortArray[i] = new Array(colCount);
		htmlArray[i]=new Array(colCount);
		for (j=0; j < colCount; j++) {
			sortArray[i][j] = table.rows(i).cells(j).innerText;
			htmlArray[i][j] = table.rows(i).cells(j).innerHTML;
		}
	}
	
   for (i=0; i < sortArray.length; i++){
	   bArray[i] = sortArray[i][currentCol];
   }
	  
	switch (dataType) {
		case "A":
			sortArray.sort(CompareAlpha);
			break;
		case "AI":
			sortArray.sort(CompareAlphaIgnore);
			break;
		case "D":
			sortArray.sort(CompareDate);
			break;
		case "DE":
			sortArray.sort(CompareDateEuro);
			break;
		case "N":
			sortArray.sort(CompareNumeric);
			break;
		default:
			sortArray.sort()
	}
	
	if(isSortDesc) sortArray.reverse();
	
 	for (i=0; i < sortArray.length; i++) { 
        for(j=0; j < bArray.length; j++) {
            if (sortArray[i][currentCol] == bArray[j]) {
                for (c=0; c<i; c++)  if (oldIndex[c] == j) bSort=true;
                if (!bSort) oldIndex[i] = j;
	            bSort = false;
            }
        }
    }

	for (i=0; i < rowCount; i++) {
		for (j=0; j < colCount; j++) {
			table.rows(i).cells(j).innerHTML = htmlArray[oldIndex[i]][j]
		}
	}
	previousCol = colNo;
	
	return
}


 //sorting functions end

//To open a logout window on browser close
function openCloseWindow() {
    var control = document.form1.TIERSCONTROL.value;
    if (control == 0) {
    var closeWin = openPopupWindow("jsp/fw/FWCloseWindow.jsp","TIERSCloseWindow","HEIGHT=400,WIDTH=400");
	closeWin.focus();    
  }
}

//Sets the value of the flag 'TIERSCONTROL' to 1 on logout - to differentiate if logout is done using the logout button or
// the browser is being closed
function setLogout(){
    parent.document.form1.TIERSCONTROL.value = "1";
	parent.document.form1.method = "POST";
	parent.document.form1.submit();
}

//Function to move a text value to a list box
function addList(txt, val, listObj){		
	n = listObj.length;			
	if(!isOptionExists(listObj, val)){					
		listObj.options[n] = new Option(txt,val);
		return true;
	}
	return false;
}

/********************************************************************************
	*	Name		: isOptionExists()
	*	Description : Function to check if the Option already exists in the List Box
	*	param1		: The List Box Object which has to be checked 
	*	param2		: The value that needs to be checked for existence(duplication)
	*	returns		:  boolean
*************************************************************************************/
	function isOptionExists(elem, val){		
		for(i=0;i<elem.length;i++)	{
			v = elem.options[i].value;		
			if(v==val)		{
				return true;
			}			
		}
		return false;
	}
						

//This function always takes first field as a dropdown. It clears and disables all the other fields if the value of the 
//dropdown is equal to " ".

function disableFieldsOnSpace()
{
var cmbValArray = new Array(" ");
var count = arguments.length;
flag=true;
	for(var j=0;j<cmbValArray.length;j++){
		//if(arguments[0].value == cmbValArray[j] ){
		if(getElementValueOrValue(arguments[0]) == cmbValArray[j] ){
			for(i=1;i<count;i++){
				flag=false;
				if(arguments[i].type == "select-one"){
					arguments[i].selectedIndex=0;
				}					
				else if (arguments[i].defaultValue =="mm" || arguments[i].defaultValue =="dd" || arguments[i].defaultValue =="yyyy"){
					arguments[i].value= arguments[i].defaultValue;
				}
				else{
					arguments[i].value="";
				}
				arguments[i].disabled = true;
			}
		}
		else{
			if(flag){
				for(i=1;i<count;i++){
					arguments[i].disabled = false;
				}
			}	 
		} 
	}
}

//This function always takes first field as a dropdown. It clears and disables all the other fields if the value of the 
//dropdown is equal to one value in the given Array.
function disableFieldsOnYes()
{
var cmbValArray = new Array("Y","Yes","SS");
var count = arguments.length;
flag=true;
   	for(var j=0;j<cmbValArray.length;j++){
   		//if(arguments[0].value == cmbValArray[j] ){
		if(getElementValueOrValue(arguments[0]) == cmbValArray[j] ){
     		for(i=1;i<count;i++){
				flag=false;
				if(arguments[i].type == "select-one"){
					arguments[i].selectedIndex=0;
				}
				else if(arguments[i].type == "checkbox"){
					arguments[i].checked=false;
				}
				//else condition added by Malathi - to set default values to date fields before disabling
				else if (arguments[i].defaultValue =="mm" || arguments[i].defaultValue =="dd" || arguments[i].defaultValue =="yyyy")
				{
					arguments[i].value= arguments[i].defaultValue;
				}
				else
				{
					arguments[i].value="";
				}
				arguments[i].disabled = true;
       		}
    	}
		else
		{
			if(flag){
       			for(i=1;i<count;i++){
       				arguments[i].disabled = false;
       			}
			}
 
		} 
  	}
}

//This function always takes first field as a dropdown. It clears and disables all the other fields if the value 
//of the dropdown is an element in the Array cmbValArray
function disableFieldsOnNo()
{
var cmbValArray = new Array("N","No","Not Enrolled");
var count = arguments.length;
flag=true;
   	for(var j=0;j<cmbValArray.length;j++){
   		//if(arguments[0].value == cmbValArray[j] ){
		if(getElementValueOrValue(arguments[0]) == cmbValArray[j] ){
			for(i=1;i<count;i++){
				flag=false;
				if(arguments[i].type == "select-one"){
					arguments[i].selectedIndex=0;
				}
				else if(arguments[i].type == "checkbox"){
					arguments[i].checked=false;
				}
				//else condition added by Malathi - to set default values to date fields before disabling
				else if (arguments[i].defaultValue =="mm" || arguments[i].defaultValue =="dd" || arguments[i].defaultValue =="yyyy")
				{
					arguments[i].value= arguments[i].defaultValue;
				}
				else
				{
					arguments[i].value="";
				}
				arguments[i].disabled = true;
       		}
    	}
		else
		{
			if(flag){
       			for(i=1;i<count;i++){
       				arguments[i].disabled = false;
       			}
			}
 
		} 
  	}
}

function enableFieldsOnSpace(){
var tmpValArray = new Array();
var cmbValArray = new Array(" ");
var count = arguments.length;
for(var k=1;k<count;k++) {
	tmpValArray[k] = arguments[k].value;
}
flag=true;
	for(var j=0;j<cmbValArray.length;j++){
		//if(arguments[0].value == cmbValArray[j] ){
		if(getElementValueOrValue(arguments[0]) == cmbValArray[j] ){
			for(i=1;i<count;i++){
				flag=false;
				arguments[i].value= tmpValArray[i];
				arguments[i].disabled = false;
			}
		}
		else{
			if(flag){
				for(i=1;i<count;i++){						
					if (arguments[i].type == "select-one"){
						arguments[i].selectedIndex = 0;
					}
					else if(arguments[i].type == "checkbox"){
						arguments[i].checked=false;
					}
					else if (arguments[i].defaultValue=="mm" || arguments[i].defaultValue =="dd" || arguments[i].defaultValue=="yyyy"){
						arguments[i].value=arguments[i].defaultValue;
					}
					else{
						arguments[i].value="";
					} 						
					arguments[i].disabled = true;
				}
			}	 
		} 
	}
}
	
//This function always takes first field as a dropdown. It enables all the other fields if the value 
//of the dropdown is equal to one of the Array elements
function enableFieldsOnYes()
{
var tmpValArray = new Array();
var cmbValArray = new Array("YES","Y","AN","HR");
var count = arguments.length;
for(var k=1;k<count;k++) {
	tmpValArray[k] = arguments[k].value;
}
flag=true;
   	for(var j=0;j<cmbValArray.length;j++){
   		//if(arguments[0].value == cmbValArray[j] ){
		if(getElementValueOrValue(arguments[0]) == cmbValArray[j] ){
			for(i=1;i<count;i++){
				flag=false;
				arguments[i].value= tmpValArray[i];
				arguments[i].disabled = false;
       		}
    	}
		else
		{
			if(flag){
       			for(i=1;i<count;i++){
					if (arguments[i].type == "select-one"){
						arguments[i].selectedIndex = 0;
					}
					else if(arguments[i].type == "checkbox"){
						arguments[i].checked=false;
					}
					else if (arguments[i].defaultValue=="mm" || arguments[i].defaultValue =="dd" || arguments[i].defaultValue=="yyyy"){
						arguments[i].value=arguments[i].defaultValue;
					}
					else{
						arguments[i].value = "";
					}
       				arguments[i].disabled = true;
       			}
			}
		} 
  	}
}

function enableFieldsOnNo(){
var tmpValArray = new Array();
var cmbValArray = new Array("N","No","MR");
var count = arguments.length;
for(var k=1;k<count;k++) {
	tmpValArray[k] = arguments[k].value;
}
flag=true;
	for(var j=0;j<cmbValArray.length;j++){
		//if(arguments[0].value == cmbValArray[j] ){
		 if(getElementValueOrValue(arguments[0]) == cmbValArray[j] ){
			for(i=1;i<count;i++){
				flag=false;
				arguments[i].value= tmpValArray[i];
				arguments[i].disabled = false;
			}
		}
		else{
			if(flag){
				for(i=1;i<count;i++){									
					if (arguments[i].type == "select-one"){
						arguments[i].selectedIndex = 0;
					}
					else if(arguments[i].type == "checkbox"){
						arguments[i].checked=false;
					}
					else if (arguments[i].defaultValue=="mm" || arguments[i].defaultValue =="dd" || arguments[i].defaultValue=="yyyy"){
						arguments[i].value=arguments[i].defaultValue;
					}
					else{
						arguments[i].value="";
					} 
					arguments[i].disabled = true;
				}
			}	 
		} 
	}
}

function clearFields(){
	var len = arguments.length;
	for (i=0;i<len;i++){
		if(arguments[i].type=="radio" || arguments[i].type=="checkbox"){
			uncheckGroup(arguments[i]);
		}else if(arguments[i].type=="select-one") {
			arguments[i].selectedIndex=0;
		}else{
			arguments[i].value = "";
		}
	}
}

function uncheckGroup(chk){
	var chkBox = eval("document.form1."+chk.name);
	var len = chkBox.length;
	if(len > 0){
		for(i=0;i<len;i++){
			chkBox[i].checked = false;
			continue;
		}
	}else{
		chkBox.checked = false;
	}
}

/*
Description : Function to get the Radio Button Value
param1		: The radio button object
returns		: The Value of the selected radio button
*/
function getRadioButtonValue (radio){ 
	if(radio.length!=null){
    	for (i = 0; i < radio.length; i++){   
        	if (radio[i].checked) {
				return radio[i].value;
			}
		}
		return null;
	}
    else
	{
    	return radio.value;
	} 
}
/*
Saurabh: Health Insurance Detail Functional Change
Description : Function to get the Drop Down Value
param1		: The drop down object
returns		: The Value of the selected drop down Value
*/

function getdisplayHlthInsCanclRsnName(selVal){
	
	if(selVal.length!=null){
    	for (i = 0; i < selVal.length; i++){   
        	if (selVal[i].selected) {        		
				return selVal[i].value;
			}
		}
		return null;
	}
    else
	{
    	return selVal.value;
	} 
	
}
//Function used to display the error messages in messageDisplay.jsp
function displayMessages(errorMessage) {
	var prevErrMsg="";
	var header="";
	var newErrorMessage = doTrim(errorMessage);
	if (newErrorMessage == null) {     
		errorMessage =  null;   
	}   
	
	if (errorMessage != null) {    
		var preErrHTML = document.getElementById('errorSpanClient').innerHTML;// document.all.errorSpanClient.innerHTML;   
		if(preErrHTML!=null&&preErrHTML!=""){        
			prevErrMsg=preErrHTML+"<BR>";   
		}   
		else
		{    
			prevErrMsg=preErrHTML;   
		}      
		if(errorMessage.indexOf("<BR>") >=0){
			header = "The following errors have occured:";
		}
		else{
			header = "The following error has occured:";
		}
		
		document.getElementById('errorTableClient').style.display='inline';//document.all.errorTableClient.style.display='inline'; 
		document.getElementById('errorHeader').innerHTML = header;//document.all.errorHeader.innerHTML = header;
		document.getElementById('errorSpanClient').innerHTML=errImg+prevErrMsg+errorMessage;//document.all.errorSpanClient.innerHTML=errImg+prevErrMsg+errorMessage;  
	}   
	else 
	{      
		document.getElementById('errorSpanClient').innerHTML="";//document.all.errorSpanClient.innerHTML="";
		document.getElementById('errorHeader').innerHTML = "";//document.all.errorHeader.innerHTML = "";     
		document.getElementById('errorTableClient').style.display='none';//document.all.errorTableClient.style.display='none';     
	} 		
}

//Function used for field level security
function resetElement(elem) {
	myType = elem.type;

    if (myType == 'hidden' || myType == 'password' || myType == 'text' || myType == 'textarea') {
    	elem.value = elem.defaultValue;
    }
        
    if (myType == 'select-one' || myType == 'select-multiple') {
		if(elem.options.length != null && elem.options.length != 0){
		var flag = false;
			for (var k=0, l=elem.options.length; k<l; k++) {				
				if (elem.options[k].defaultSelected) {
					flag = true;
					break;
				}
			}
			
			if (!flag) {
				elem.options[0].selected = true;
			} 
			else  
			{
				for (var k=0, l=elem.options.length; k<l; k++) {				
            		elem.options[k].selected =elem.options[k].defaultSelected;
            	}
			}
		}			
	}
	return false;
}

//Function used to return a boolean of prevalidateForm
function runValidations(thisForm){
	return preValidate(thisForm,0);
}


//Function to set PAGE_ACTION value and submit form
function setActionFieldAndSubmit(frm,value,validate) {
	var validateFlag = false;
//  	if(value == null){//If pageAction value is null - DO NOT SUBMIT THE PAGE
//   		return false;
//   	}
   	frm.PAGE_ACTION.value = value;
   	
   	if (frmTarget !=null && frmTarget !=""){
   		frm.target = frmTarget;
   	}
   	if (validate == 'N' && pageSubmit == false) {
    	frm.method = "POST";
      	pageSubmit = true;
	  	return true;
   	} else {
   		if(pageSubmit == false){
   			return preValidate(frm);
   		}else{
			return false;
   		}
   }
}   

//1. Function to initialize scroll table

function initScrollTable(oElement) {
   resizeScrollTable(oElement);
   oElement.firstChild.syncTo = oElement.lastChild.uniqueID;
   oElement.firstChild.syncDirection = "horizontal";
}

//2. Functions to resize Scroll table
function resizeScrollTable(oElement) {
   var head = oElement.firstChild;
   var headTable = head.firstChild;
   var body = oElement.lastChild;
   var bodyTable = body.firstChild;
   
   var bodyTableHeight = Math.max(0, oElement.clientHeight - head.offsetHeight);
   body.style.height = bodyTableHeight;
   var scrollBarWidth = body.offsetWidth - body.clientWidth;
  
   // set width of the table in the head
   var headTableWidth = Math.max(0, Math.max(bodyTable.offsetWidth + scrollBarWidth, oElement.clientWidth));
   headTable.style.width = headTableWidth;

   // go through each cell in the head and resize
   var headCells = headTable.rows[0].cells;
   var bodyCells = bodyTable.rows[0].cells;
   
   for (var i = 0; i < bodyCells.length; i++)
      headCells[i].style.width = bodyCells[i].offsetWidth;
}

//Function to open a modal dialog
function openModalDialog(URL,winName,features){
	features = features+";scroll:no;center=yes;help:no;status=no";
	var modalVal = showModalDialog(URL,winName,features);
	return modalVal;
}

//Function to set a given value to a field
function setFieldValue(field,val){
	field.value = val;
}

/*This function is used to filter the options of one dropdown depending on the value selected in another drowdown(options of first dropdown should be related to the values of second dropdown ).
/It takes four parameters.
1.selected value of the first dropdown(filter criteria).
2.dropdown with same values as dropdown to be filtered(it should be hidden object)
3.dropdown to be filtered(second dropdown).
4.dropdown contains the all the corresponding values (common values same type of first dropdown) of the second dropdown.
*/
function selVal(selfield,hidCombo1,filteredCombo,hidCombo2){
var progfilter = selfield;
var dreason = hidCombo1;
var denialReason = filteredCombo;
var creason = hidCombo2;
var dval ;
var dtext ;
var count =  denialReason.options.length;
	for(var j=count-1;j>-1;j--){
		denialReason.options[j] = null;
	}
	for(var i=0;i<creason.options.length;i++){
		if(progfilter == creason.options[i].value){
			dval = dreason.options[i].value;
			dtext = dreason.options[i].text;
			var newopt = new Option(dtext,dval)
			denialReason.options[denialReason.options.length] = newopt;
		}
	}
}

// Function to clear the messages from the Message Display zone
function clearMessages(){
	displayMessages("");
}

//Function to get a handle to an Anchor Tag
//Used by disableTabs() and enableTabs()
function getLinkByID(tab) {
 if (!document.all) {
   return false;
 }
 var link = null;
 links = document.getElementsByTagName('a');
 for (var i=0;i<links.length;i++) {
	  link =  links[i];
	 if (tab == link.id) {
	   break;
	 }
 }
 return link;
}

/********************************************************************************
	*	Name		: getListText
	*	Description : Function called from redoList to get the Text for the given value of an Option
	*     param1		: valu - Value of Option
	*	param2		: selobj - Source List object
	*	returns		: Text of the Option 				  
	*********************************************************************************/
	function getListText(valu,selobj)	{		
		ret = "";		
		elem = selobj;			
		for(j=0;j<elem.length;j++){
			if(valu==elem.options[j].value){
				ret = elem.options[j].text;
				break;
			}
		}
		if(ret==""){
			ret = "N/A";
		}
		return ret;
	}



//Function to disable Address Group Custom Tag
function disableAddr(combo,thisForm){ 
    var addressArray = new Array();
    if (thisForm.locationType2 != null && thisForm.locationType2 != "undefined") 
    {
		addressArray = new Array  (thisForm.streetName2,thisForm.streetNumber,thisForm.strType,thisForm.fraction,thisForm.direction,thisForm.locationType,thisForm.aptNumber,thisForm.addressLine2,thisForm.city,thisForm.state,thisForm.zipCode4,thisForm.zipCode5,thisForm.county);
    }
    else if (thisForm.dwellingType != null && thisForm.dwellingType != "undefined") 
    {
    	addressArray = new Array(thisForm.streetName2,thisForm.streetNumber,thisForm.strType,thisForm.fraction,thisForm.direction,thisForm.dwellingType,thisForm.aptNumber,thisForm.addressLine2,thisForm.city,thisForm.state,thisForm.zipCode4,thisForm.zipCode5);
    } 
    var addressLen = addressArray.length
    for(var j=0;j<addressLen;j++){
    	disableFieldsOnYes(combo,addressArray[j]);
 	}
}

//Function to get todays date from the Server and not from the client machine
function getToday(){
	try
	{
		var sysDate = document.form1.SysDate.value;
		var today;

		if(sysDate != null && sysDate != ""){
			y = sysDate.substring(0,4);
			m = sysDate.substring(5,7);
			d = sysDate.substring(8);
			today = new Date(y, m-1, d);
			return today;
		}
		else{
			today = new Date(Calendar.getYear(), Calendar.getMonth(), Calendar.getDate());
		}
	}
	catch (Exception){}
}

//Function to allow enter key inside a text area
function textAreaEnter(){
	enterKey = true;
}

//Function to save the carriage returns entered in a textArea.
function textAreaBreak(tArea){
	var len = tArea.value.length;
	var val="";
	var a = 1;
	for(i=0;i<len;i++)
	{
		var t = tArea.value.charAt(i);
		var b;
		if(t == "\r" || t=="\n"){
			a=a+1;
			b = a%2;
			if(b != 0){
				val=val+"~";
			}
		}
		else
		{
			val = val+t;
		}
	}
	tArea.value = val;
}

//Function to replace ~ with carriage returns in a textArea.
function replaceTilda(tArea){
	var len = tArea.value.length;
	var val="";
	for(i=0;i<len;i++)
	{
		var t = tArea.value.charAt(i);
		if(t == "~"){
			val=val+"\r\n";
		}
		else
		{
			val = val+t;
		}
	}
	tArea.value = val;
}

//Functions added by Malathi to avoid duplicate(date) error messages
function validateDates(month,day,year) {
	var monthVal=month.value;
	var dayVal=day.value;
	if (dayVal=="disableDay") dayVal="01";
	var yearVal=year.value;
	var test = "";
	
  	if (validateMonth(month) && validateDay(day) && validateYear(year)) {
		var thisDateStr = monthVal + "/ " + dayVal + "/ " + yearVal;

		var thisDate = new Date( thisDateStr );
	
		var thisDateGMTString = thisDate.toGMTString();
		var thisDatefinalarray = thisDateGMTString.split( " " );
		var thisMonthNum = getMonthNumber(thisDatefinalarray[2]);
		
		if ( thisMonthNum == monthVal ) {
			return true;
		} else {
			return createErrorMessages(month,day,year);
		}
		return true;
  	}else{
			if (! validateMonth(month) || ! validateDay(day) || ! validateYear(year)){
				if(month.name != m.name){
				dateVal = true;
				}
			}
		return false;
	}
} 

//Functions added by Malathi to avoid duplicate(date) error messages
function createErrorMessages(month,day,year) {
	var monthVal=month.value;
	var dayVal=day.value;
	var yearVal=year.value;
  	if(monthVal==2) {
    	if (yearVal%4 ==0 && dayVal>29) {
    		 dateVal = true;
			 return false;
	    } else if (yearVal%4 !=0 && dayVal>28) {
    		 dateVal = true;
			 return false;
	    }     
	}else if ((monthVal==4 || monthVal == 6 || monthVal==9 || monthVal==11) && dayVal>30) {
	 	dateVal = true;
		return false;
	}
	return true;
}

//Function to validate the zip code
function checkZip(field1,field2,hidField,val){

	if(isZero(field1)){
		if(isZero(field2)){
			hidField.value = field1.value+field2.value;
			if(val == "N"){
				return isMaxSet(field1);
			}else if (val == "Y"){
				if(isComplete(hidField)){
					return isMaxSet(field1);
				}
			}
		}
		else return false;
	}
	else return false;
}

//Function to concatenate date(from date customtag) and time (from time customtag)
function formDate(aDate,aTime,tgt){
	var val = aTime.value;
	var pos = val.indexOf(" ");
	var a = val.substring(pos);
	var newDt = aDate.value +""+ a;
	tgt.value = newDt;
}

//Function to set the focus on the first field in a page
function setFocusOnFirstField(){
	if (document.forms.length > 0)
  	{
	var a = document.forms[0];
	var b = a.length;

	for(i=0;i<b;i++){
		try{
			if(a.elements[i].type != null && a.elements[i].type != "hidden" && a.elements[i].disabled != true && a.elements[i].style.visibility != "hidden" && a.elements[i].style.display != "none"){
				a.elements[i].focus();
				//pcr33902 
				//added this to highlight entire text selection if its the first element in the page
				//if statement helps avoid skipping of first element if it is a select box
				if(a.elements[i].type != "select-one"){
					a.elements[i].select();
				}
				return false;
			}
		}catch(Exception){}  
	}
	}
}

	/***********************************************************************
	*	Name		: getDefaultValues()
	*	Description : Function to get the default value of a form element
	*	param1		: elem  - Element whose default value needs to be
	*				  obtained
	*	returns		: Array of default values.
	***********************************************************************/
	function getDefaultValues(elem){
		var defArr = new Array();
		myType = elem.type;
		if (myType == 'hidden' || myType == 'password' || myType == 'text' || myType == 'textarea') {
			defArr.push( elem.defaultValue);
		}        
		if (myType == 'select-one' || myType == 'select-multiple') {
		var flag = false;
			for (var k=0, l=elem.options.length; k<l; k++) {				
				if (elem.options[k].defaultSelected) {
					flag = true;
					break;
				}
			}			
			if (!flag){
				;
			} 
			else{
				for (var k=0, l=elem.options.length; k<l; k++) {				
					if(elem.options[k].defaultSelected){
						defArr.push(elem.options[k].value);
					}
				}
			}
		}					
		return defArr;
	}

// Set value of Checkbox to "Y" (if checked) or "N"
function setCheckBoxValue(selectedCheckbox){
	if(selectedCheckbox.checked){
		selectedCheckbox.value = "Y";		
	}
	else{
		selectedCheckbox.value = "N";			
	}	
}
/*
	Function to set the checkbox value for the second parameter
*/

function setHiddenValue(selectedCheckbox, selectedHiddenField){
	if(selectedCheckbox.checked){
		selectedHiddenField.value = "Y";	
	}
	else{
		selectedHiddenField.value = "N";			
	}	
}
/*
	Function to set the radiobutton value for the second parameter
*/
function setHiddenRadioButtonValue(selectedRadioButton, selectedHiddenField){
	var val = getRadioButtonValue(selectedRadioButton);
	selectedHiddenField.value = val;
}

/*
 * Function used to return the element value if the 
 * given parameter  is a valid object/element in the
 * form or return the parameter as a value otherwise
 */
 function getElementValueOrValue(elem){
		try{
			if(elem.name!=null&&elem.value!=null&&elem.value!="undefined"){
				return elem.value;
			}
			else{
				return elem;
			}
		}catch(Exception){
			return elem;
		}
	}





// To prepare query string for the given form
function prepareFormRequestParams(frm){
var requestString = "";
	for(var i=0;i<frm.length;i++){
		var elem = frm.elements[i];
		if(elem!=null){
			if(elem.name!=null&&elem.name!="undefined"){
				if(requestString==""){
					requestString+=elem.name+"="+elem.value;
				}
				else{
					requestString+="&"+elem.name+"="+elem.value;
				}
			}
			else if(elem.id!=null&&elem.id!="undefined"){
				if(requestString==""){
					requestString+=elem.name+"="+elem.value;
				}
				else{
					requestString+="&"+elem.name+"="+elem.value;
				}
			}
		}
	}
	return requestString;
}

//Function to set the value of the TARGET of the given form
function setFormTarget(frm,val){
   	frm.target = val;
    return true;
}

//Function to set all the first letters in a given string to Caps
function setAllFirstCaps(frmObj) {
	var index, tmpStr, tmpChar, preString, postString, strLen;

	tmpStr = frmObj.value.toLowerCase();
	strLen = tmpStr.length;
	if (strLen > 0)  {
		for (index = 0; index < strLen; index++)  {
			if (index == 0)  {
				tmpChar = tmpStr.substring(0,1).toUpperCase();
				postString = tmpStr.substring(1,strLen);
				tmpStr = tmpChar + postString;
			}
			else 
			{
				tmpChar = tmpStr.substring(index, index+1);
				if (tmpChar == " " && index < (strLen-1))  {
					tmpChar = tmpStr.substring(index+1, index+2).toUpperCase();
					preString = tmpStr.substring(0, index+1);
					postString = tmpStr.substring(index+2,strLen);
					tmpStr = preString + tmpChar + postString;
         		}
      		}
   		}
	}
	frmObj.value = tmpStr;
}

/********************************************************************
*	Name		:	isGroupChecked()
*	Description :	Function to validate the Program selection
*					and ensure that atleast one programs is selected
*	param1		:	grpElem
*	param2		:	chkNum - the number of elements(radio/checkbox) 
*					that should be checked
*	returns		:	boolean
*********************************************************************/
	function isGroupChecked(grpElem, chkNum){
		var cnt = 0;
		if(grpElem==null){
			return false;
		}
		if(grpElem.length>0){
			for(var i=0;i<grpElem.length;i++){					
				if(grpElem[i].checked){				
					cnt++;					
				}					
			}			
		}
		else{
			if(grpElem.checked){				
				cnt++;		
			}			
		}
		if(cnt>=chkNum){
			return true;
		}
		else{
			return false;
		}
	}



//Function to set the selected value of a dropdown
function setSelected(combo,selVal){
	for(i=0;i<combo.length;i++){
		if(combo.options[i].value==selVal){
			combo.options[i].selected = true;
		}
	}
}

function isCompleteForm(thisfrm){	
	var manFields = getMandatoryFields(thisfrm);	
	if(manFields!=null&&manFields.length>0){
		return true;
	}
	else{		
		var frmElemIds = new Array();
		for(var i=0;i<thisfrm.length;i++){
			var elem = thisfrm.elements[i];
			if(elem.name=="dynaLoad"){
				break;
			}
			if(elem!=null&&elem.lblDesc!=null&&elem.lblDesc!=""){
				//&&(elem.type=="text"||elem.type=="select-one"||
				//elem.type=="select-multiple"||elem.type=="text-area")){
				if(elem.HELPID!=null){
					addtoUniqueElementArray(frmElemIds,elem.HELPID);					
				}
				else if(elem.helpid!=null){
					addtoUniqueElementArray(frmElemIds,elem.helpid);							
				}				
				else if(elem.name!=null){
					addtoUniqueElementArray(frmElemIds,elem.name);						
				}	
				else if(elem.id!=null){
					addtoUniqueElementArray(frmElemIds,elem.id);							
				}	
			}
		}		
		var ret =  isCompleteFields(frmElemIds,'OR');
		return ret;
	}
	return true;
}

function getMandatoryFields(frm){
	var manElemIdArr = new Array();
	for(var i=0;i<frm.length;i++){		
		var vals = getElementValidations(frm.elements[i]);		
		if(vals!=null&&vals.length>0){
			for(var j=0;j<vals.length;j++){
				if(vals[j]!=null&& vals[j]!=""&&vals[j].indexOf("isComplete(")>=0){					
					if(frm.elements[i].helpid!=null){
						manElemIdArr.push(frm.elements[i].HELPID);	
					}
					else if(frm.elements[i].name!=null){
						manElemIdArr.push(frm.elements[i].name);	
					}	
					else if(frm.elements[i].id!=null){
						manElemIdArr.push(frm.elements[i].id);	
					}	
				}
			}
		}
	}
	return manElemIdArr;
}
function getElementValidations(elem){
	var valFunctions = new Array();
	var validate =elem.validate;
	if ((validate !=null) && (validate!="undefined")&&(validate!="null")){			
		var startPos;
		do{
			startPos=0;
			var fun;
			var endPos=validate.indexOf(";");
			if(endPos > 0){
				fun=validate.substring(startPos,endPos);				
				startPos=endPos+1;
				validate=validate.substring(startPos,validate.length);						
			}else{
				fun=validate;
			}
			var spcs = doTrim(fun);		
			if(spcs!=null&&spcs!="null"&&spcs!=""){
				var netfunc = parseFunctionName(fun);				
				valFunctions.push(netfunc);
			}				
		}while(endPos != -1);
	}
	return valFunctions;
}


function addtoUniqueElementArray(arrObj,valtoAdd){
	var ret = true;
	for(var k=0;k<arrObj.length;k++){
		if(arrObj[k]==valtoAdd){
			ret = false;
			break;
		}
	}
	if(ret){
		arrObj.push(valtoAdd);
	}
	return ret;
}

function setKeyValues(keys,vals){
	var k,m,ind1,ind2=0;
    var sub1,sub2 = "";
	do {
	 	ind1 = keys.indexOf(":");
	 	ind2 = vals.indexOf(":");
	   	if(ind1 == -1){
	   		sub1 = keys.substring(k);
	   	}else{
	   		sub1 = keys.substring(k,ind1);
	   	}
	   	if(ind2 == -1){
	   		sub2 = vals.substring(k);
	   	}else{
	   		sub2 = vals.substring(k,ind2);
	   	}
	   	m = document.getElementById(sub1);		
		if(m== null){
			m = document.getByName(sub1);
		}

	   	try{
	    	if(opener.document.getElementById(sub1) != null){
	   			m = opener.document.getElementById(sub1);
	   		} 
	   	}catch(e){}
	   	m.value = sub2;
	   	keys = keys.substring(ind1+1);
	   	vals = vals.substring(ind2+1);
	}while (ind1 != -1);
	
	try{
		if(opener.document.getElementById(sub1) != null){
			window.close();
		} 
	}catch(Exception){}

}

//Function to display characters as uppercase, even when lower case chars are enetered. Use OnKeyPress event to invoke this method.
function uppercase()
{
  key = window.event.keyCode;
  if ((key > 0x60) && (key < 0x7B))
    window.event.keyCode = key-0x20;
}

//Function to pop up a confirmation Dialog for Deletes & then submit the form.
function warnOnDelete(frm,act,val){
 	//var response = confirm('Delete data: Continue?');
 	var response = confirmAction('Do you wish to delete the data?');
 	if(response){
 		return setActionFieldAndSubmit(frm,act,val);
 	}else{
 		return false;
	}
}

//Function to pop up confirm dialogs with custom messages.Returns true if OK was clicked. Returns false if Cancel was clicked.
function confirmAction(msg){
	var fld = confirm(msg);
	return fld;
}

//Function to submit form if - enter key is pressed and PAGE_ACTION is not 'null or empty'.
function handleKeyPress(){
	var frm = document.form1;
	var defButton = document.getElementById("DefaultPageAction");
	
	if(defButton == null){
		defButton = document.getElementsByName("DefaultPageAction");
	}

	if (pageSubmit == false && window.event && window.event.srcElement)
  	{
		var tagName = window.event.srcElement.tagName;
		var fldName = window.event.srcElement.name;
		var elemType = window.event.srcElement.type;
		var inp = document.getElementById("PAGE_ACTION");
		if(inp == null){
			inp = document.getElementsByName("PAGE_ACTION");
		}
		//alert(window.event.keyCode);
		if(window.event.keyCode == 32){//SpaceBar
			if(tagName == "A"){
				window.event.srcElement.click();
			}else return true;
    	}else if (window.event.keyCode == 13) {//EnterKey
			if (tagName !="TEXTAREA") {
				if (inp!=null){
			    	if (inp.value != null && inp.value != "null" && inp.value != ""){
		  				var returnValue = setActionFieldAndSubmit(frm,inp.value,'Y');
			  			if(defButton != null && returnValue == true){
			  				//window.event.returnValue = false;
			  				pageSubmit = true;
			  				frm.submit();
			  			}
				    }
				}
			}else{
				return true;
			}
		}else{
			return true;
		}
  	}
 	return false;
}
var nav = navigator.appName.substring(0,1); 
var M=false; 
var N=false; 
app=navigator.appName.substring(0,1); 
if (app=='N') N=true; else M=true; 
if (M){ 
        document.onkeypress=handleKeyPress 
}else{ 
        document.onkeypress=handleKeyPress() 
} 

//Function used to set focus on error messages 
function setFocusonMessages() {
	var errMsgFocusImg = document.getElementById("errorSpanClient");

	
	if(errMsgFocusImg == null){
		errMsgFocusImg = document.getByName("errorSpanClient");
	}

	try{
		errMsgFocusImg.focus();
		pauseExecution(500);
	}catch(Exception){}  
	
}

//Function to pause execution
function pauseExecution(timeDelay)
{
	d = new Date() //today's date
	while (true){
		mill=new Date() // Date Now
		diff = mill-d //difference in milliseconds
		if(diff > timeDelay){
			break;
		}
	}
}


function disableStatuses() { for ( var count = 0 ; count < 
document.links.length; count++ ) document.links[count].onmouseover = 
blankStatus ; }
function blankStatus() { window.status = "" ; return true ; }

// Function for show or hide joint owner fields
function showJointOwner(){
	if(document.getElementById('jntOwner').style.display=="none"){
		document.getElementById('jntOwner').style.display="inline";
	} else if(document.getElementById('jntOwner').style.display=="inline"){
		document.getElementById('jntOwner').style.display="none";
	}
	// If some one outside home is unchecked clearing the fields
	if(!document.form1.other_0_1.checked){
		document.form1.firstName_0_1.value="";
		document.form1.lastName_0_1.value="";
		document.form1.firstName_0_2.value="";
		document.form1.lastName_0_2.value="";
	}
}

function rmcShowJointOwner(){
	if(document.getElementById('jntOwner').style.display=="none"){
		$('#otherOwnersInternalText').show();
		$('#jntOwner').show()
	} else if(document.getElementById('jntOwner').style.display=="inline"){
		$('#otherOwnersInternalText').hide();
		$('#jntOwner').hide()
	}
	// If some one outside home is unchecked clearing the fields
	if(!document.form1.other_0_1.checked){
		document.form1.firstName_0_1.value="";
		document.form1.lastName_0_1.value="";
		document.form1.firstName_0_2.value="";
		document.form1.lastName_0_2.value="";
	}
	
	var fieldSetOriginal = $(document.getElementById('jntOwner')).closest("fieldset");
	fieldSetOriginal.removeAttr("style");
	var elementHeight = fieldSetOriginal.height();
	var tableRow = fieldSetOriginal.closest("tr");
	tableRow.find(".resizeClass fieldset").height(elementHeight-7);
}

function showSpouseTXI(){
	if(document.getElementById('spouseTXI').style.display=="none"){
		document.getElementById('spouseTXI').style.display="inline";
	} else if(document.getElementById('spouseTXI').style.display=="inline"){
		document.getElementById('spouseTXI').style.display="none";
	}
	// If some one outside home is unchecked clearing the fields
	if(!document.form1.other_0_1.checked){
		document.form1.firstName_0_1.value="";
		document.form1.lastName_0_1.value="";
	}
}

//Function for show or hide expectedBabiesCt Dropdown
function showExpectedBabiesCtDropdown(){
	
	var noOneValue = document.getElementById("NoOne_PREG");
	if(noOneValue == null){
		noOneValue = document.getByName("NoOne_PREG");
	}

	
	if(typeof noOneValue === 'undefined' || noOneValue == null){
		return;
	}
	var arr = new Array();
	if(noOneValue.checked == true){	
		document.getElementById("expectedBabiesCtDropdown").style.display = "none";
		
	 }
	else {
	
	var componentContainer=document.getElementById("containerTable").getElementsByTagName("input"); 
	var count=0;
	for(var i=0;i<componentContainer.length;i++) 
	{ 
	     var id=componentContainer[i].id; 
	    if(id!="NoOne_PREG" && componentContainer[i].checked == true) {
	    	 document.getElementById("expectedBabiesCtDropdown").style.display = "block";	 
	    	 break;
	      }else{
	    	  count=count+1;	      
	     }	   
	}
	  if(count==componentContainer.length){
		  document.getElementById("expectedBabiesCtDropdown").style.display = "none";
	  }
	
	}
	 
}
   
		
 
	
//Function to check for mandatory fields - without popping the alerts - validates both enabled and disabled fields
function isData(field) {

	var cd,desc;
	var len;
	if(field.type =="radio" || field.type =="checkbox"){
   	 	if(field.checked == true){
   	 		return true;
   	 	}
   	 	else return false;
   	}
	else
	{
		if(field.type != "select-one"){
			trimSpaces(field);
		}
		var val = field.value;  
		if (val!=null) {
		   	var vallen= val.length;
		   	if(field.type == "select-one"){
		   		len = field.options.length;
		   		for(var m=0;m<len;m++){
		   			cd = field.options[m].value;
					desc = field.options[m].text;
					if( field.options[m].selected == true && ((cd == "" && desc == "") || (cd == "0" && desc == "") || cd == "SEL" )){
						return false;
					}
					return true;
		   		}
		   	}
		   	else
		   	{
				if (vallen <=0) {
		     		return false;
				}
			}
		} 
   		return true;
   	}
}
//Function used to display the error messages in messageDisplay.jsp
function displayDynaSectionMessages(errorMessage) {
	var prevErrMsg="";
	var header="";
	var newErrorMessage = doTrim(errorMessage);
	if (newErrorMessage == null) {     
		errorMessage =  null;   
	}   
	
	if (errorMessage != null) {    
		var preErrHTML = document.getElementById('errorSpanClient').innerHTML;   
		if(preErrHTML!=null&&preErrHTML!=""){        
			prevErrMsg=preErrHTML+"<BR>";   
		}   
		else
		{    
			prevErrMsg=preErrHTML;   
		}      
		if(errorMessage.indexOf("<BR>") >=0){
			header = "The following errors have occured:";
		}
		else{
			header = "The following error has occured:";
		}
		document.getElementById('errorTableClient').style.display='inline'; 
		document.getElementById('errorHeader').innerHTML = header;
		document.getElementById('errorSpanClient').innerHTML=prevErrMsg+errorMessage;  
	}   
	else 
	{      
		document.getElementById('errorSpanClient').innerHTML="";
		document.getElementById('errorHeader').innerHTML = "";     
		document.getElementById('errorTableClient').style.display='none';     
	} 		
}
/*
	Function to throw the validation message in dynasection
*/
function alertMeDynaSection(){
	var args = alertMeDynaSection.arguments;
	var errDynaMsg = getErrorMessageOrSeverity(args[0]);
	var errSeverity = getErrorMessageOrSeverity(args[0],'severity');
	if(errDynaMsg.indexOf("~")>=0){
		var msg = formulateMessage(errDynaMsg, args);
		errMsg = msg;
	}
	if(args[0]==errDynaMsg){		
		//If the call does not contain any Error code or if the error code is not defined.
		var tmp = "Error Code Not Defined "+args[0];
		if(isValidateON){
			validationErrors.push(tmp);		
		}else{
			displayMessages(tmp,"client-side");
		}	
	}
	else{
		extractElementIdFromField(args);
		if(isValidateON){
			validationErrors.push(getImageForMessage(errSeverity,args[0])+errDynaMsg);
		}else{
			displayDynaSectionMessages(getImageForMessage(errSeverity,args[0])+errDynaMsg,"client-side");
		}
	}
	setFocusonMessages();
	return true;
}
/*
	Function to get the message severity for a message
*/
function getErrorMessageOrSeverity(errCode){
	var errArray;
	var desc = errCode;
	var args = getErrorMessageOrSeverity.arguments;
	var temp = errCode.substring(0,2);
	temp = temp.toLowerCase();
	try{
		errArray = eval(temp+"ErrorCodes");
	}catch(e){
		return errCode;
	}
	var len = errArray.length;	
	for(j=0;j<len;j++){
		if(args.length == 2 && args[1] == "severity"){
			if(errArray[j][0]==errCode){
				desc = errArray[j][2];
				break;
			}
		}
		else
		{
			if(errArray[j][0]==errCode){
				desc = errArray[j][1];
				break;
			}
		}
	}
	return desc;
}
//Function to display appropriate error/warning/information image for message display
function getImageForMessage(severity,cde){
	var img = "";
	if (severity == "0"){//Success
		img = successImg;
		return img;
	}else if(severity == "1"){//Error
		img = errImg;
		return img;
	}else if (severity == "2"){//Warning
		img = warningImg;
		return img;
	}else{//Info
		img = messageImg;
		return img;
	}
}
/*
	Function to get the elementid
*/
function extractElementIdFromField(args){
	var fld;
	var len = args.length;
	for(var i=0;i<len;i++){
		fld = args[i];
		if(fld != null && fld.elementId != null && fld.elementId != "undefined" ){
			errorElementIdArray.push(fld.elementId);
		}
	}
}


// Function to show the message for 'Delete' button click in dynasection
function dynaSectionDelete(deleteFld,sectionCounter,pageAction,validateFlag){
	setFieldValue(document.form1.DYNA_SECTION_DELETE,sectionCounter);
	if(warnOnDelete(document.form1,pageAction,validateFlag)){
		return true;
	}else{
		return false;
	}
	return true;
}
/*
Returns a array of field objects whose names startwith the given String
*/
function getArrayOfFieldsStartingWith(str){
	var num = document.form1.length;
	var len = str.length;
	var field,name;
	var arr = new Array();
	try{
		for(var i = 0; i<num; i++){
			field = form1.elements[i];
			name = field.name;
			if(name.substring(0,len) == str){
				arr.push(field);
			}
		}
	}catch(Exception){}
	return arr;
}


/*
Returns the key string, given the field object
*/
function getKeyFromField(field){
	var name = field.name;
	var un = name.indexOf("_");
	var key = name.substring(un+1);
	return key;
}
/*
Populates all the field values to "newValue" 
- whose names start with starts with "startsWith" - and whose current value is "oldValue"
*/
function populateFieldsStartingWith(startsWith,oldValue,newValue){
	var arr = new Array();
	arr = getArrayOfFieldsStartingWith(startsWith);
	var len = arr.length;
	for(var i=0; i<len; i++){
		trimSpaces(arr[i]);	
		if(arr[i].value == oldValue){
			arr[i].value = newValue;
		}
	}	
}

/*
 Function to track the popup windows
*/
function setChildWindowStatus(){
	var currPageId = document.form1.CURRENT_PAGE_ID.value;
	var flag = false;
	if(currPageId == 'ANHNQ' || currPageId == 'ANIHD' || currPageId == 'ANOTH' || currPageId == 'ANFAS')
	{
		flag = true;
	}
	if(flag)
	{
		window.opener.form1.CHILDWIN.value='N';
	}	
}
/*
 Function to display the warning message before close the window.
*/

function confirmClose(event) {    
   if(!isPopup()){
	   var action = document.getElementById("form1").action;   
	   myclose=false;   
	   if ((event.clientY < -60 )  && action != "TIMEOUT") {           	
	   	myclose=true;
	   	var str = "Please make sure you logout of CommonHelp before closing the browser.  If you need to logout, please click CANCEL and logout.  If you have already logged out , click OK button.";
		   str+="  ";
		 str+="Failure to logout, might keep the session active.";           
		event.returnValue = str;	
	    } 
	}
}

/*
 Function to identify whether its a popup window or Normal window
*/
function isPopup(){
	
 	var query = window.location.search.substring(1); 
	var vars = query.split("&"); 
	for (var i=0;i<vars.length;i++) 
	{ 
		var pair = vars[i].split("="); 
		if (pair[0] == "POP_UP") 
		{ 
			return true;
		} 
	} 
	return false;
}


//Function to find the browser and based on browser calling the css
function toChkBrowserAndCallCss(){

var browser=navigator.appName;
var b_version=navigator.appVersion;
var version=parseFloat(b_version);
if (browser=="Netscape")
  {
 	pagestyle.href="/access/css/mozila_style.css";
 }
 
  if(browser=="Opera")
  {
 		
	 pagestyle.href="/access/css/mozila_style.css";
	 	
  }
   
}



//Based on browser call the css for RMC ,Work Request ID : BRGUS00200960, added By :Giridhar Gani
function toChkBrowserAndCallRMCCss(){

var browser=navigator.appName;
var b_version=navigator.appVersion;
var version=parseFloat(b_version);
if(browser=="Netscape")
  {
	pagestyle_rmc.href="/access/css/mozila_rmc_Styles.css";
  }
 
  if(browser=="Opera")
  {
   pagestyle_rmc.href="/access/css/mozila_rmc_Styles.css";
  }
   
}

// santosh added for client security at kiosks

var obj = new Object(); 
function showPinPopup(language) {
	if (!detectPopupBlocker(language)){ 
		var url = "/access/accessController?PAGE_ACTION=ASREPLoad&&POP_UP=Y&&PAGE_TIMEOUT=Y";
		popwindow = window.showModalDialog(url,obj, "dialogWidth:800px; dialogHeight:400px; center:yes");
		
		if (obj.returnvalue  == "correct"){
			;
		}
		if(obj.returnvalue  == "wrong"){
			window.location="/access/accessLogout?VALID_GET=Y&MyAccessLogout=Y";
		} else {
			if (obj.returnvalue == null || obj.returnvalue == 'undefined'){
				showPinPopup(language);
			}
		}
	} else {
		window.location = "/access/accessLogout?VALID_GET=Y&MyAccessLogout=Y";
	}
}

function pageTimedOut() {
	var obj = new Object(); 
	var language = null;
//	if (!detectPopupBlocker(language)){ 
//		popwindow = window.showModalDialog("/access/accessController?PAGE_ACTION=ASREPLoad&&POP_UP=Y&&PAGE_TIMEOUT=Y",obj, "dialogWidth:840px; dialogHeight:400px; center:yes");
//	
//		if (obj.returnvalue  == "correct"){
//			resetTimer();
//		}else if(obj.returnvalue  == "wrong"){
//			window.location="/access/accessLogout?VALID_GET=Y&MyAccessLogout=Y";
//		}else{
//			timer = window.setTimeout("pageTimedOut()", 1000);
//		}	
//	} else {

//		window.location = "/access/";    commented montana ssp
		window.location = "/access/accessLogout?VALID_GET=Y&MyAccessLogout=Y/";
		//window.location = "/access/accessController?PAGE_ACTION=LoadMyAccessHome&pageTimedOut=Y&VALID_GET=Y"; // add flag to show time out message on Landing Page

//	}
}

function resetTimer(){
	if (timer!=null && timer!= "undefined" && timer!=""){
		window.clearTimeout(timer);
	}
	startTimer();
}

function startTimer() {
	var pageTimeout = document.getElementById("pageTimeout").value;
	if (pageTimeout!=null && pageTimeout!="undefined" && pageTimeout != ""){
		pageTimeout = parseInt(pageTimeout);
	}
	timer = window.setTimeout("pageTimedOut()", pageTimeout*60*1000);
}

function checkEnter(e) {
	if (event.keyCode == 13) { 
        validatePin(); 
    } 
}


function validatePin(){
		
		document.getElementById("errorTableClient").style.display = 'none';
		var enteredPin = document.getElementById("securityPinNumber").value;
		var tempPin = enteredPin;
		var sessionpin = document.getElementById("sessionpin").value;
		var pincount = document.getElementById("pinCount").value;
		var obj = window.dialogArguments; 
		if (isInteger(enteredPin)){
			enteredPin = encrypt(enteredPin);
		}
		if (enteredPin == sessionpin)
		{
			obj.returnvalue = "correct";
			window.close();
		} else { 
			pincount =  parseInt(pincount);
			document.forms[0].securityPinNumber.value='';
			document.getElementById("errorTableClient").style.display = 'block';
			var str = '<IMG SRC="/access/images/icon_error.gif" ALT="Error" WIDTH="17" HEIGHT="17" VSPACE="2" ALIGN="absmiddle">&nbsp;';
			if (tempPin.length == 0){
				str = str + document.forms[0].pinEmptyMsg.value;
			} else {
			 str1 = document.forms[0].pinWrongMsg.value;
			 str = str + str1.replace("~",(3-pincount));
			 pincount = pincount+1;
			 }
			document.forms[0].pinCount.value = pincount;
			document.getElementById("errorSpanClient").innerHTML = str; 
			if(pincount > 3){
				obj.returnvalue = "wrong";
				window.close();
			}
		}
}

function detectPopupBlocker(language) {
  var myTest = window.open("about:blank","","directories=no,height=10,width=10,menubar=no,resizable=no,scrollbars=no,status=no,titlebar=no,top=0,location=no");
  var str = "";
  var str1 = "";
  var str2 = "";
  var str3 = "";
  if (!myTest) {
  	if (language == null || language=='EN') {
	  	 str1 = "We have found your browser is set to block pop-ups.";
	  	 str2 = "This website uses pop-ups. ";
  		 str3 = "You will be logged out now. Please change your browser setting to allow pop-ups and login again.";
  	} else {
  		 str1 = "Hemos encontrado que su navegador esta configurado para bloquear las ventanas autom�ticas.";
	  	 str2 = "Este sitio Web utiliza ventanas emergentes. Su sesi�n ser� terminada ahora.";
  		 str3 = "Favor de cambiar la configuraci�n de su navegador para permitir ventanas emergentes y comience una sesi�n de nuevo.";
  	}
    alert(str1+"\r\n"+str2+"\r\n\r\n"+str3); 
    return true;
  } else {
    myTest.close();
    window.focus();
    return false;
  }
}


function checkForPopupBlocker() {
    var row = document.getElementById("popupMsg");	
	if(row == null){
		row = document.getByName("popupMsg");
	}

	var popupWin = window.open("about:blank","","directories=no,height=10,width=10,menubar=no,resizable=no,scrollbars=no,status=no,titlebar=no,top=0,location=no");
	if (!popupWin) {
	   row.style.display = "block";
	   document.forms[0].popupSw.value='Y';
	} else {
	   popupWin.close();
	   var element = document.getElementById("errorTableClient");
	   if(element == null){
		   element = document.getByName("errorTableClient");
		}
	   if (element!=null && element.innerText.indexOf("Please do not use the Forward")!=-1){
   	   	document.getElementById("errorTableClient").style.display = 'none';
   	   }
       row.style.display = "none";
	}
}

function closeSession() {
	var obj = window.dialogArguments;
	obj.returnvalue = "wrong";
	window.close();
}

function closePDFWindowAndSession() {
	if (window.opener != null) {
		window.close();
		window.opener.location = "/access/accessLogout?VALID_GET=Y&MyAccessLogout=Y";
	} else {
		window.location = "/access/accessLogout?VALID_GET=Y&MyAccessLogout=Y";
	}
}

	function encrypt(number){
		  var encrypted, temp;
		  var first, second, third, fourth;
		  
		   temp = number;
		  first=(temp/1000+7)%10;
		  temp=temp%1000;
		  second=(temp/100+7)%10;
		  temp=temp%100;
		  third=(temp/10+7)%10;
		  temp=temp%10;
		  fourth=(temp+7)%10;

		encrypted=Math.floor(third)*1000+Math.floor(fourth)*100+Math.floor(first)*10+Math.floor(second);
		return encrypted;
	}

//Function to submit form if - enter key is pressed and PAGE_ACTION is not 'null or empty'.
function callOnchangeMethod(mthodName){	
	var frm = document.form1;
	var defButton = mthodName;
	var inp = mthodName;
	if (inp!=null){
	   	if (inp != null && inp != "null" && inp != ""){
				var returnValue = setActionFieldAndSubmit(frm,inp,'Y');
	  			if(defButton != null && returnValue == true){
	  				//window.event.returnValue = false;
	  				pageSubmit = true;
	  				frm.submit();
	  			}
		    }
	}  
 	return false;
}	

//EDSP CP starts: hide/display element in jsp
function displayAlienBlock(usCitizen){	
	 var val = usCitizen.value;
	 var check = usCitizen.checked;
		 //getRadioButtonValue(usCitizen);
	 if(val=='N' && check){
		 $('#alienInformation').show();
		 $('#alienInformationone').show();
		 $('#alienInformationtwo').show();

		 $('#alienInformation_l').show();
		 $('#alienInformationone_l').show();
		 $('#alienInformationtwo_l').show();
	 }else {// if(val == "Y" && check){
		 $('#alienInformation').hide();
		 $('#alienInformationtwo').hide();

		 $('#alienInformation_l').hide();
		 $('#alienInformationtwo_l').hide();
		 
		 document.getElementById("immDocType").value="";
		 document.getElementById("docIdNumber").value="";
		 document.getElementById("dateEntryIntoUs").value="";
		 document.getElementById("alienStatus").value="SEL";
		 document.getElementById("alienRegId").value="";
		 document.getElementById("whatHapDate").value="";
		 
		 document.getElementById("eliImmiStatus_Y").checked=false;
		 document.getElementById("eliImmiStatus_N").checked=false;
		 document.getElementById("personLivInUS_Y").checked=false;
		 document.getElementById("personLivInUS_N").checked=false;
		 document.getElementById("refugueOrApp_Y").checked=false;
		 document.getElementById("refugueOrApp_N").checked=false;
		 document.getElementById("doesPersonSponser_Y").checked=false;
		 document.getElementById("doesPersonSponser_N").checked=false;
		 
	 }
}

/* Added for ND-713 */
/*function displayDateMoved(dateMoved){
	 var val = getRadioButtonValue(dateMoved);
	 if(val == "Y"){
		 $('#dateInformation').show();
	 }else if(val == "N"){
		 $('#dateInformation').hide();
	 }
}*/
/* Added for ND-713 */

function displaySponsorBlock(sponsor){	
	 var val = getRadioButtonValue(sponsor);
	 if(val == "Y"){
		 $('#sponsorInformation').show();
	 }else if(val == "N"){
		 $('#sponsorInformation').hide();
	 }
}

function displaySponserBlock(doesPersonSponser){	
	 var val = getRadioButtonValue(doesPersonSponser);
	 if(val == "N"){
		 $('#sponserInformatiobn').show();
	 }else if(val == "Y"){
		 $('#sponserInformatiobn').hide();
	 }
}

function displayTemporaryAwayFromHomeBlock(tempAwayFromHome){	
	 var val = getRadioButtonValue(tempAwayFromHome);	
	 if(val == "Y"){		
		 $('#temporaryAwayFromHome').show();
	 }else if(val == "N"){
		 $('#temporaryAwayFromHome').hide();
	 }
}

function displayShowLast3Months(showMon){
	
	var val = getRadioButtonValue(showMon);
	if(val == "Y"){			
		$('#showMonths').show();	
	} else if(val == "N"){
		$('#showMonths').hide();		
	}
	
}

function displayWithInLastThreeMonthsBlock(LastThreeMonths){	
	 var val = getRadioButtonValue(LastThreeMonths);
	 if(val == "Y"){
		 $('#withLastThreeMonthsFirst').show();
		 $('#withLastThreeMonthsSecond').show();
	 }else if(val == "N"){
		 $('#withLastThreeMonthsFirst').hide();
		 $('#withLastThreeMonthsSecond').hide();
	 }
}

function displayStrikeInfoBlock(strikeInformation){
 	 var val = getRadioButtonValue(strikeInformation);
 	  if(val == "Y"){
 		 $('#StrikeInfo').show();
	 }else if(val == "N"){
		 $('#StrikeInfo').hide();	
  }	
} 	  

function displayStateEmpBenPlanBlock(stateBenPlan){	
	 var val = getRadioButtonValue(stateBenPlan);
	 if(val == "Y"){
		 $('#StatePlan').show();
		 $('#EmployeeDetailsAndHealth').show();

	 }else if(val == "N"){
		 $('#StatePlan').hide();
		 $('#EmployeeDetailsAndHealth').hide();

	 }
}

function displayHlthInsCanclRsn(healthCancelRsn){	
	 var val = getRadioButtonValue(healthCancelRsn);
	 if(val == "Y"){
		 $('#HealthCancelRsn').show();
	 }else if(val == "N"){
		 $('#HealthCancelRsn').hide();
		 $('#CancelRsnName').hide();
	 }
}

function displayHlthInsCanclRsnName(CancelRsnName){	
	 var val = getdisplayHlthInsCanclRsnName(CancelRsnName);
	 if(val == "OTHR"){
		 $('#CancelRsnName').show();
	 }else{
		 $('#CancelRsnName').hide();
		 
	 }
}




function displayWaitingProbationaryPeriodBlock(probationPeriod){	
	 var val = getRadioButtonValue(probationPeriod);
	 if(val == "Y"){
		 $('#ProbationaryPeriod').show();

	 }else if(val == "N"){
		 $('#ProbationaryPeriod').hide();

	 }
}

function displayHowOftenBlock(howMuchOften){	
	 var val = getRadioButtonValue(howMuchOften);
	 if(val == "Y"){
		 $('#HowOften').show();

	 }else if(val == "N"){
		 $('#HowOften').hide();

	 }
}


function displaySomeonePayBillBlock(paySomeoneBill){	
	 var val = getRadioButtonValue(paySomeoneBill);
	 if(val == "Y"){
		 $('#SomeonePayBill').show();
		 $('#SomeonePayBill_l').show();
	 }else if(val == "N"){
		 $('#SomeonePayBill').hide();
		 $('#SomeonePayBill_l').hide();
		 document.getElementById('pnmedet').value="";
		 document.getElementById('fnmedet').value="";
		 document.getElementById('lnmedet').value="";
		 document.getElementById('selectagency').value="";
		 document.getElementById('amountPaid').value="";
	 }
}

function displaypayshelterBlock(payBilltoShelter){	
	 var val = getRadioButtonValue(payBilltoShelter);
	 if(val == "Y"){
		 $('#PayShelterBill').show();
	 }else if(val == "N"){
		 $('#PayShelterBill').hide();
	 }
}


function anyOneHasAnotherNameOrSSN(anotherNameOrSsn){	
	 var val = getRadioButtonValue(anotherNameOrSsn);
	 if(val == "Y"){
		 $('#otherNameOrSSN').show();
	 }else if(val == "N"){
		 $('#otherNameOrSSN').hide();
	 }
}

function americanIndianOrAlaska(amiIndOralaska){	
	 var val = getCheckBoxValue(amiIndOralaska);
	 if(val == "1"){
		 $('#americanInd').show();
	 }else if(val == "0"){
		 $('#americanInd').hide();
	 }
}

//show hide blocks in Tax Information Screen
/*
function displayFileJnSpouse(fileJnSpouse){	
	 var val = getRadioButtonValue(fileJnSpouse);
	 if(val == "Y"){
		 $('#fileJnSpouse1').show();
		 $('#fileJnSpouse2').show();
		 $('#fileJnSpouse3').show();
	 }else if(val == "N"){
		 $('#fileJnSpouse1').hide();
		 $('#fileJnSpouse2').hide();
		 $('#fileJnSpouse3').hide();
	 }
}

function displayClaimDependents(claimDep){	
	var val = getRadioButtonValue(claimDep);
	if(val == "Y"){
		$('#claimDep1').show();
		$('#claimDep2').show();
		$('#claimDep3').show();
		$('#claimDep4').show();
		$('#claimDep5').show();
		$('#claimDep6').show();
		$('#claimDep7').show();
	}else if(val == "N"){
		$('#claimDep1').hide();
		$('#claimDep2').hide();
		$('#claimDep3').hide();
		$('#claimDep4').hide();
		$('#claimDep5').hide();
		$('#claimDep6').hide();
		$('#claimDep7').hide();
	}
}

function displayClaimAsDependent(claimAsDep){	
	var val = getRadioButtonValue(claimAsDep);
	if(val == "Y"){
		$('#claimAsDep1').show();
		$('#claimAsDep2').show();
		$('#claimAsDep3').show();
		$('#claimAsDep4').show();
		$('#claimAsDep5').show();
		$('#claimAsDep6').show();
	}else if(val == "N"){
		$('#claimAsDep1').hide();
		$('#claimAsDep2').hide();
		$('#claimAsDep3').hide();
		$('#claimAsDep4').hide();
		$('#claimAsDep5').hide();
		$('#claimAsDep6').hide();
	}
}
*/


//EDSP CP ends: hide/display element in jsp

//EDSP CP starts: hide/display for living arrangement
function displayLivingArrangment(livingArrangementCd){
	var dropDownValue = livingArrangementCd;
	
	 if(dropDownValue == "HF" || dropDownValue == "FE" || dropDownValue == "HM" || dropDownValue == "SB" || dropDownValue == "CB" 
		 || dropDownValue == "HP" || dropDownValue == "GL" || dropDownValue == "RF" || dropDownValue == "DA" || dropDownValue == "HA" 
		 || dropDownValue == "HS"){
		 $('#livingArrangementBlock').show();
	 }else{
		 $('#livingArrangementBlock').hide();
		 document.getElementById("slaStartDate").value="";
		 var citycounty = document.getElementsByName("slaCityCounty");
		 for(i=0; i < citycounty.length; i++){
			 if(citycounty[i].type == "text"){
				 citycounty[i].value = "";
			 }
		 }
		 var placed = document.getElementsByName("slaPlaced");
		 for(i=0; i < placed.length; i++){
			 if(placed[i].type == "radio"){
				 placed[i].checked = false;
			 }
		 }
		 document.getElementById("slaState").value="SEL";
	 }
}
//EDSP CP ends: hide/display for living arrangment




//EDSP CP starts: hide/display for out of home
function isEven(value) {
	return (value%2 == 0);
}

function isOdd(value){
	return (!isEven(value));
}

function adjustHeight(){
	var numFieldsets = $("fieldset:visible").length;
	if(isOdd(numFieldsets)){
		for(var i=1; i<=numFieldsets; i++){
			var heightToMatch = $("fieldset:eq("+i+")").height();
			i++;
			$("fieldset:eq("+i+")").css('height', heightToMatch);
		}
	}else{
		for(var i=0; i<=numFieldsets; i++){
			var heightToMatch = $("fieldset:eq("+i+")").height();
			i++;
			$("fieldset:eq("+i+")").css('height', heightToMatch);
		}
	}
}

function changeHeight(delta){
	
	var numFieldsets = $("fieldset:visible").length;
	if(isOdd(numFieldsets)){
		for(var i=2; i<=numFieldsets; i++){
			var heightToMatch = $("fieldset:eq("+i+")").height();
			heightToMatch = heightToMatch - delta;
			$("fieldset:eq("+(i-1)+")").height(heightToMatch);
			i++;
		}
	}else{
		for(var i=1; i<=numFieldsets; i++){
			var heightToMatch = $("fieldset:eq("+i+")").height();
			heightToMatch = heightToMatch - delta;
			$("fieldset:eq("+(i-1)+")").height(heightToMatch);
			i++;
		}
	}
}

function changeFieldsetHeight(delta){
	var numFieldsets = $("fieldset:visible").length;
	numFieldsets = numFieldsets;
	for(var i=2; i<=numFieldsets-1; i++){
		var heightToMatch = $("fieldset:eq("+i+")").height();
		heightToMatch = heightToMatch - delta;
		$("fieldset:eq("+(i-1)+")").height(heightToMatch);
		i++;
	}
}

function displayOutOfHome(outOfHome){
	var val = getRadioButtonValue(outOfHome);
	 if(val == "Y"){
		 $('#OutOfHomeBlock').show();
	 }else if(val == "N"){
		 $('#OutOfHomeBlock').hide();
	 }
}

//EDSP RMB starts: hide/display for Additonal Information
function displayPrograms(programsBlock){
	var val = getRadioButtonValue(programsBlock);
	 if(val == "Y"){
		 $('#ProgramsBlock').show();
	 }else if(val == "N"){
		 $('#ProgramsBlock').hide();
	 }
}

//EDSP CP ends: hide/display for out of home

//EDSP CP starts: hide/display for purpose
function displayConditionalPurpose(conditionalPurpose){
	var val = getRadioButtonValue(conditionalPurpose);
	if(val == "Y"){
		 $('#purposeCondBlock1').show();
		 $('#purposeCondBlock2').show();
		 $('#purposeGap1').show();
		 $('#purposeGap2').show();
		 $('#purposeGap3').show();
		 $('#purpose30CondBlock1').show();
	}else if(val == "N"){
		 $('#purposeCondBlock1').hide();
		 $('#purposeCondBlock2').hide();
		 $('#purposeGap1').hide();
		 $('#purposeGap2').hide();
		 $('#purposeGap3').hide();
		 $('#purpose30CondBlock1').hide();
	}
}
//EDSP CP ends: hide/display for purpose

//EDSP CP starts: hide/display for Joint Owners
function displayOtherOwnersOptional(){
	if(document.form1.other_0_1.checked){
		$('#otherOwnersInternalText').show();
		$('#jntOwner').show();
		$('#makeAliasNameTable').show();
	}else if(!document.form1.other_0_1.checked){
		$('#otherOwnersInternalText').hide();
		$('#jntOwner').hide();
		$('#makeAliasNameTable').hide();
	}
}
//EDSP CP ends: hide/display for Joint Owners

//EDSP CP starts: hide/display for Joint Owners for RMC
function rmcDisplayOtherOwnersOptional(){
	if(document.form1.other_0_1.checked){
		$('#otherOwnersInternalText').show();
		$('#jntOwner').show();
	}else if(!document.form1.other_0_1.checked){
		$('#otherOwnersInternalText').hide();
		$('#jntOwner').hide();
		$('#firstName_0_1').val('');
		$('#lastName_0_1').val('');
	}
}
//EDSP CP ends: hide/display for Joint Owners for RMC

//EDSP CP starts: hide/display for Life Insurance
function displayLifInsDetOptional(){
	if(document.form1.insotr_0_1.checked){
		$('#lifInsDetInternalText').show();
		$('#lifInsDet').show();
	}else if(!document.form1.insotr_0_1.checked){
		$('#lifInsDetInternalText').hide();
		$('#lifInsDet').hide();
	}
}
//EDSP CP ends: hide/display for Life Insurance

// EDSP CP starts: Function for show or hide life insurance policy
function showLifInsDet(){
	if($('#lifInsDet').is(':visible') ){
		$('#lifInsDet').hide();
	}else{
		$('#lifInsDet').show();
	}
	
	// If some one outside home is unchecked clearing the fields
	if(!document.form1.insotr_0_1.checked){
		document.form1.fName_0_1.value="";
		document.form1.lName_0_1.value="";
		document.form1.fName_0_2.value="";
		document.form1.lName_0_2.value="";
	}
}


function autoformatDate(d, key){
	var pK = (key.which) ? key.which : key.keyCode; 

	if (pK == 8){
		//d.value = d.value.substr(0,d.value.length-1); 
		return;
	}

	var dt = d.value;
	var pattern_dd = /^\d\d\d$/;
	var pattern_dd_dd = /^\d\d\/\d\d\d$/;
	
	if(pattern_dd.test(dt) || pattern_dd_dd.test(dt)){
		//dt = dt+"/";
		var lastChar = dt.charAt( dt.length-1 );
		dt = dt.slice(0, -1);
		dt = dt+'/'+lastChar;
	}else if( '/' == dt.charAt(1)){
		dt = '0'+dt;
	}else if( '/' == dt.charAt(3)){
		dt = dt.substr(0,2);
	}else if( '/' == dt.charAt(4)){
		var tempMonth = dt.charAt(3);
		dt = dt.substr(0,3) + '0'+ tempMonth;
	}else if( '/' == dt.charAt(6)){
		dt = dt.substr(0,5);
	}

	var da = dt.split('/');
	for (var a = 0; a < da.length; a++) {
		if (da[a] != +da[a]){
			da[a] = da[a].substr(0,da[a].length-1);
		}
	}
	if (da[0] > 12) {
		da[1] = da[0].substr(da[0].length-1,1);
		da[0] = '0'+da[0].substr(0,da[0].length-1);
	}
	if (da[1] > 31) {
		da[2] = da[1].substr(da[1].length-1,1);
		da[1] = '0'+da[1].substr(0,da[1].length-1);
	}
	if (da[2] > 9999){
		da[1] = da[2].substr(0,da[2].length-1);
	}
	dt = da.join('/');
	if (dt.length == 2 || dt.length == 5){
		dt += '/';
	}
	
	d.value = dt;
}

function autoformatDateShort(d, key) {
	var pK = (key.which) ? key.which : key.keyCode; 

	if (pK == 8){
		//d.value = substr(0,d.value.length-1); 
		return;
	}

	var dt = d.value;

	if( '/' == dt.charAt(1)){
		dt = '0'+dt;
	}else if( '/' == dt.charAt(3)){
		dt = dt.substr(0,2);
	}

	var da = dt.split('/');
	for (var a = 0; a < da.length; a++) {
		if (da[a] != +da[a]){
			da[a] = da[a].substr(0,da[a].length-1);
		}
	}
	if (da[0] > 12) {
		da[1] = da[0].substr(da[0].length-1,1);
		da[0] = '0'+da[0].substr(0,da[0].length-1);
	}
	if (da[1] > 9999){
		da[1] = da[1].substr(0,da[1].length-1);
	}
	dt = da.join('/');
	if (dt.length == 2){
		dt += '/';
	}
	
	d.value = dt;
}
/*
 * This function is specific for the <code>FWGroupSSNTag</code> limiting ssn range
 */
 
 function limitSSN3(field, key){

	var $input = $('input[name="ssn3socialSecurity"]');
	$input.keyup(function(e) {
	    var max = 4;
	    if ($input.val().length > max) {
	        $input.val($input.val().substr(0, max));
	    }
	});
	
	return;
}
 
 
 
 

/*
 * This function is specific for the <code>FWGroupSSNTag</code> auto tab feature
 */
function autoTabMove(field, key){
	var pK = (key.which) ? key.which : key.keyCode; 
	var fieldValue = field.value;
	
	if((field.id == 'ssn1socialSecurity') || (field.id == 'ssn1preSocialSecurity') || (field.id == 'ssn1ssnupload') || (field.id == 'ssn1searchSocialSecurity')){
		if(fieldValue.length == 3){
			
			if(field.id == 'ssn1socialSecurity'){
			document.getElementById('ssn2socialSecurity').focus();
			document.getElementById('ssn2socialSecurity').select();
			}
			
			if(field.id == 'ssn1preSocialSecurity'){
			document.getElementById('ssn2preSocialSecurity').focus();
			document.getElementById('ssn2preSocialSecurity').select();
			}
			
			if(field.id == 'ssn1ssnupload'){
				document.getElementById('ssn2ssnupload').focus();
				document.getElementById('ssn2ssnupload').select();
			}
			
			if(field.id == 'ssn1searchSocialSecurity'){
				document.getElementById('ssn2searchSocialSecurity').focus();
				document.getElementById('ssn2searchSocialSecurity').select();
			}
			
		}else{
			return;
		}
	}else if((field.id == 'ssn2socialSecurity') || (field.id == 'ssn2preSocialSecurity') || (field.id == 'ssn2ssnupload') || (field.id == 'ssn2searchSocialSecurity')){
		if(fieldValue.length == 2){
			
			if(field.id == 'ssn2socialSecurity'){
			
			document.getElementById('ssn3socialSecurity').focus();
			document.getElementById('ssn3socialSecurity').select();
			}
			if(field.id == 'ssn2preSocialSecurity'){
				document.getElementById('ssn3preSocialSecurity').focus();
				document.getElementById('ssn3preSocialSecurity').select();
			}
			if(field.id == 'ssn2ssnupload'){
				
				document.getElementById('ssn3ssnupload').focus();
				document.getElementById('ssn3ssnupload').select();
			}
			if(field.id == 'ssn2searchSocialSecurity'){
				document.getElementById('ssn3searchSocialSecurity').focus();
				document.getElementById('ssn3searchSocialSecurity').select();
			}
			
			
		}else
		if (pK == 8 && fieldValue.length == 0){
			
			
			if(field.id == 'ssn2socialSecurity'){
			
			document.getElementById('ssn1socialSecurity').focus();
			var val = document.getElementById('ssn1socialSecurity').value;
			document.getElementById('ssn1socialSecurity').value = '';
			document.getElementById('ssn1socialSecurity').value = val;
			document.getElementById('ssn1socialSecurity').select();
			}
			
			if(field.id == 'ssn2preSocialSecurity'){
				document.getElementById('ssn1preSocialSecurity').focus();
				var valTwo = document.getElementById('ssn1preSocialSecurity').value;
				document.getElementById('ssn1preSocialSecurity').value = '';
				document.getElementById('ssn1preSocialSecurity').value = valTwo;
				document.getElementById('ssn1preSocialSecurity').select();	
			}
			
			if(field.id == 'ssn2ssnupload'){
				document.getElementById('ssn1ssnupload').focus();
				var valThree = document.getElementById('ssn1ssnupload').value;
				document.getElementById('ssn1ssnupload').value = '';
				document.getElementById('ssn1ssnupload').value = valThree;
				document.getElementById('ssn1ssnupload').select();	
			}
			
			if(field.id == 'ssn2searchSocialSecurity'){
				document.getElementById('ssn1searchSocialSecurity').focus();
				var valThree = document.getElementById('ssn1searchSocialSecurity').value;
				document.getElementById('ssn1searchSocialSecurity').value = '';
				document.getElementById('ssn1searchSocialSecurity').value = valThree;
				document.getElementById('ssn1searchSocialSecurity').select();	
			}
			
			
			
		}else{
			return;
		}
	}else if((field.id == 'ssn3socialSecurity') || (field.id == 'ssn3preSocialSecurity') || (field.id == 'ssn3ssnupload') || (field.id == 'ssn3searchSocialSecurity')){
		if (pK == 8 && fieldValue.length == 0){
			
			if(field.id == 'ssn3socialSecurity'){
			document.getElementById('ssn2socialSecurity').focus();
			var val = document.getElementById('ssn2socialSecurity').value;
			document.getElementById('ssn2socialSecurity').value = '';
			document.getElementById('ssn2socialSecurity').value = val;
			document.getElementById('ssn2socialSecurity').select();
			}
			
			if(field.id == 'ssn3preSocialSecurity'){
				document.getElementById('ssn2preSocialSecurity').focus();
				var valTwo = document.getElementById('ssn2preSocialSecurity').value;
				document.getElementById('ssn2preSocialSecurity').value = '';
				document.getElementById('ssn2preSocialSecurity').value = valTwo;
				document.getElementById('ssn2preSocialSecurity').select();	
			}
			
			if(field.id == 'ssn3ssnupload'){
				document.getElementById('ssn2ssnupload').focus();
				var valThree = document.getElementById('ssn2ssnupload').value;
				document.getElementById('ssn2ssnupload').value = '';
				document.getElementById('ssn2ssnupload').value = valThree;
				document.getElementById('ssn2ssnupload').select();
			}
			
			if(field.id == 'ssn3searchSocialSecurity'){
				document.getElementById('ssn2searchSocialSecurity').focus();
				var valThree = document.getElementById('ssn2searchSocialSecurity').value;
				document.getElementById('ssn2searchSocialSecurity').value = '';
				document.getElementById('ssn2searchSocialSecurity').value = valThree;
				document.getElementById('ssn2searchSocialSecurity').select();
			}
			
			
		}else{
			return;
		}
	}
	
	return;
}

//EDSP CP ends: Function for show or hide life insurance policy

// Displaying pointer cursor for all input elements
$(document).ready(function() {
	$(".TopNav img, a, select, input:not(:text, textarea):not(:password)").css('cursor', 'pointer');
	trimTextBoxData();
});

function endCheckBoxHideShow(d,reason,date){
	
	var individual = $(d).attr('name');
	var indvnum = individual.split("_");
	var ind_num = indvnum[1];
	var seq_num = indvnum[2];

	if(seq_num === undefined){
		
		if ($(d).is(':checked')) {
	 	$("."+date+"_" + ind_num).show();
	 	}else{
	 	$("."+date+"_" +  ind_num).val('');
	 	$("."+date+"_" +  ind_num).hide();
	 	
	 	}
		
	}else{
		
	if ($(d).is(':checked')) {
 	$("."+reason+"_" + ind_num +"_"+seq_num+"" ).show();
 	$("."+reason+"_" +  ind_num +"_"+seq_num+"").closest("TABLE").show();
 	$("."+reason+"_" +  ind_num +"_"+seq_num+"").closest("TABLE").prev("BR").show();
 	$("."+date+"_" + ind_num +"_"+seq_num+"" ).show();
 	$("."+date+"_" +  ind_num +"_"+seq_num+"").closest("TABLE").show();
 	$("."+date+"_" +  ind_num +"_"+seq_num+"").closest("TABLE").prev("BR").show();
 	}else{
 	$("."+reason+"_" +  ind_num +"_"+seq_num+"").hide();
 	$("."+reason+"_" +  ind_num +"_"+seq_num+"").closest("TABLE").hide();
 	$("."+reason+"_" +  ind_num +"_"+seq_num+"").closest("TABLE").prev("BR").hide();
 	$("."+date+"_" +  ind_num +"_"+seq_num+"").hide();
 	$("."+date+"_" +  ind_num +"_"+seq_num+"").closest("TABLE").hide();
 	$("."+date+"_" +  ind_num +"_"+seq_num+"").closest("TABLE").prev("BR").hide();
 	}
	
	}

}

/*function popupAppealsScreen(){
	window.open("/access/jsp/access/afb/ABRequestHearing.jsp", "_blank", "scrollbars=1,resizable=1,height=700,width=750");	
}*/

function popupRegisterProviderAccountScreen(){
	window.open("/access/accessController?VALID_GET=Y&CURRENT_PAGE_ID=HPEPR&POP_UP=Y&PAGE_ACTION=HPEPRLoad", "_blank", "scrollbars=1,resizable=1,height=700,width=750");
}

function showPageHelp(helpURL) {
    if (window.showModelessDialog) {
     var modalVal=window.showModelessDialog(helpURL,'', 'scroll:yes;resizable:yes;dialogWidth:723px;dialogHeight=450px;dialogTop=100');
 } else {
     var modalVal = window.open(helpURL, '', "scrollbars=yes,width=723,height=450,top=100", null);
     modalVal.dialogArguments = '';
 }
 return modalVal;
}

function trimTextBoxData(){
	$("input[maxlength='10']").each(function() {
		try{
			var id  = $(this.value);
			var value = id.selector;
			if(value.length > 10){
				var trimmedValue = value.substring(0,value.length-3);
				$(this).val(trimmedValue);
			}
		}catch (e) {
			console.error('Exception occured in trimTextBoxData()');
		}
	});
}
function displayDateOfPossession(possessionResp){
	var val = getRadioButtonValue(possessionResp);
	 if(val == "Y"){
		 $('#convictionDateBlock').show();
	 }else if(val == "N"){
		 document.getElementById('convictionDate').value = '';
		 $('#convictionDateBlock').hide();
	 }
}
function displayMisdemeanorDate(misdemeanorResp){
	var val = getRadioButtonValue(misdemeanorResp);
	 if(val == "Y"){
		 $('#misdemeanorDateBlock').show();
	 }else if(val == "N"){
		 document.getElementById('dateConvictionMisdemeanor').value = '';
		 $('#misdemeanorDateBlock').hide();
	 }
}
function displayCvrgDatesSection(noOfIndvs,resp){
	var val = getRadioButtonValue(resp);
	for(var index = 1; index <= noOfIndvs; index++){
		$('#rowIndv_'+index).hide();
		$('#othCvrdbyPlcy_'+index).prop( "disabled", true );
	}
	 if(val == "N"){
		 $('#OthersCoveredByPolicySection').show();
		 for(var index = 1; index <= noOfIndvs; index++){
			if(document.getElementById("relation_"+index).checked){
				$('#OthersCoveredByPolicySection').show();
				$('#rowIndv_'+index).show();
				$('#othCvrdbyPlcy_'+index).prop( "disabled", false );
			}
		}
	 }else if(val == "Y"){
		 $('#OthersCoveredByPolicySection').hide();
	 }
}
function populateDates(indvSize,onload){
	var startDate = "";
	var endDate = "";
	if(null != document.getElementById("beginDate") || "null" == document.getElementById("beginDate")){
		startDate = document.getElementById("beginDate").value;
	}
	if(null != document.getElementById("endDate") || "null" == document.getElementById("endDate")){
		startDate = document.getElementById("endDate").value;
	}
	for(var index = 1; index <= indvSize; index++){
		if(document.getElementById("othCvrdbyPlcy_"+index).checked && onload != 'Y'){
			document.getElementById("memberStartDate_"+index).value = startDate;
			document.getElementById("memberEndDate_"+index).value = endDate;
		}
		$('#rowIndv_'+index).hide();
		$('#othCvrdbyPlcy_'+index).prop( "disabled", true );
		if(document.getElementById("relation_"+index).checked){
			$('#rowIndv_'+index).show();
			$('#othCvrdbyPlcy_'+index).prop( "disabled", false );
		}
	}
}
function showDoesAllDatesSameQue(noOfIndvs,indvSeqNum){
	var indvId = indvSeqNum.id.charAt(indvSeqNum.id.length-1);
	if(indvSeqNum.checked){
		$('#othCvrdbyPlcy_'+indvId).prop( "disabled", false );
		$('#rowIndv_'+indvId).show();
	}else{
		$('#othCvrdbyPlcy_'+indvId).prop( "disabled", true );
		$('#rowIndv_'+indvId).hide();
		document.getElementById('memberStartDate_'+indvId).value="";
		document.getElementById('memberEndDate_'+indvId).value="";
		document.getElementById("othCvrdbyPlcy_"+indvId).checked = false; 
	}
	var indvChecked = false;
	for(var index = 1; index <= noOfIndvs; index++){
		if(document.getElementById("relation_"+index).checked){
			indvChecked = true;
			break;
		}
	}
	if(indvChecked){
		$('#DoesAllDatesSameQueSection').show();
		if(document.getElementById("allCvrdByPlcy_N").checked){
			$('#OthersCoveredByPolicySection').show();
		}else{
			document.getElementById("allCvrdByPlcy_Y").checked = true;
			document.getElementById('beginDate').value="";
			document.getElementById('endDate').value="";
			for(var inIndex = 1; inIndex <= noOfIndvs; inIndex++){
				document.getElementById("othCvrdbyPlcy_"+inIndex).checked = false; 
				document.getElementById('memberStartDate_'+inIndex).value="";
				document.getElementById('memberEndDate_'+inIndex).value="";
			}
		}
	}else{
		$('#DoesAllDatesSameQueSection').hide();
		$('#OthersCoveredByPolicySection').hide();
		document.getElementById("allCvrdByPlcy_Y").checked = true;
		document.getElementById('beginDate').value="";
		document.getElementById('endDate').value="";
		for(var inIndex = 1; inIndex <= noOfIndvs; inIndex++){
			document.getElementById("othCvrdbyPlcy_"+inIndex).checked = false; 
			document.getElementById('memberStartDate_'+inIndex).value="";
			document.getElementById('memberEndDate_'+inIndex).value="";
		}
	}
}
function displayIncomeAsset(resp){
	if(resp == "IN"){
		$('#IncomeTypeSection').show();
		if(null != document.getElementById("IncomeTypeSection_l"))
			$('#IncomeTypeSection_l').show();
		document.getElementById("assetType").value = "SEL";
		$('#AssetTypeSection').hide();
		if(null != document.getElementById("AssetTypeSection_l"))
			$('#AssetTypeSection_l').hide();
	}else if(resp == "AS"){
		$('#AssetTypeSection').show();
		if(null != document.getElementById("AssetTypeSection_l"))
			$('#AssetTypeSection_l').show();
		document.getElementById("incomeType").value = "SEL";
		$('#IncomeTypeSection').hide();
		if(null != document.getElementById("IncomeTypeSection_l"))
			$('#IncomeTypeSection_l').hide();
	}
}

function displayWokedOffAmtBlock(WokedOffAmt){	
	 var val = getRadioButtonValue(WokedOffAmt);
	 if(val == "Y"){
		 $('#AmtWorkedOff').show();
		 $('#AmtWorkedOff_l').show();
	 }else if(val == "N"){
		 $('#AmtWorkedOff').hide();
		 $('#AmtWorkedOff_l').hide();
		 document.getElementById('workOffAmount').value="";
	 }
}

function displayExptChngByBlock(WokedOffAmt){	
	var val = getRadioButtonValue(WokedOffAmt);
	if(val == "Y"){
		$('#ExptChngBy').show();
		$('#ExptChngBy_l').show();
	}else if(val == "N"){
		$('#ExptChngBy').hide();
		$('#ExptChngBy_l').hide();
		document.getElementById('expectPaidBy').value="";
	}

}
function displayPhoneTextbox(resp){
	var val = getRadioButtonValue(resp);
	
	if(val == "Y"){
		$('#phoneNumberBlock').show();
	}else if(val == "N"){
		document.getElementById('cellPhone').value = '';
		document.getElementById('confirmationCode').value = '';
		$('#phoneNumberBlock').hide();
	}

	/*try{
		var xmlhttp;
		if(window.XMLHttpRequest){
			xmlhttp=new XMLHttpRequest();
		}
		xmlhttp.open("GET","/access/accessController?ajaxCall=Y&selectedYes="+val,true);
		xmlhttp.send();
	}catch (e) {
		e.message;
	}*/
}

function adjustFieldHeight(leftPanelId,leftPanelFldHt,fieldId){
	
	var h = $('#'+leftPanelId).height();
    var lineheight = $('#'+fieldId).parent().height();         
    var count = 1;
    if(h>leftPanelFldHt && h>lineheight){
    	count = h/leftPanelFldHt;
    	lineheight = leftPanelFldHt * count;
    	$('#'+fieldId).parent().css('height', lineheight);
    }
	
}
function displayMailingAddressBlock(resp){
	var val = getRadioButtonValue(resp);
	if(val == "Y"){
		$('#mailingAddressBlock').show();
	}else if(val == "N"){
		$('#mailingAddressBlock').hide();
		document.getElementById('addressLine1').value = '';
		document.getElementById('addressLine2').value = '';
		document.getElementById('city').value = '';
		document.getElementById('state').value = '';
		document.getElementById('zipCode').value = '';
		document.getElementById('liveCounty').value = '';
		document.getElementById('selectCountry').value = '';
		document.getElementById('addressType_M').checked = false;
	}
}

function displayBankorMailSection(resp,radioSw){
	var val = '';
	if(radioSw == 'Y'){
		val = getRadioButtonValue(resp);
	}else{
		val = resp;
	}
	if(val == "Y"){
		$('#bankDetailsSection').show();
		$('#addressSection').hide();
		document.getElementById('addressType_S').checked = false;
		document.getElementById('addressType_M').checked = false;
	}else if(val == "N"){
		$('#bankDetailsSection').hide();
		$('#addressSection').show();
		if(document.getElementById('isMailingAddrSw_Y').checked){
			document.getElementById('addressType_M').checked = true;
		}else{
			document.getElementById('addressType_M').checked = false;
		}
		document.getElementById('nameOfBank').value = '';
		document.getElementById('accountNumber').value = '';
		document.getElementById('bankRoutingNumber').value = '';
		document.getElementById('accountType_S').checked = false;
		document.getElementById('accountType_C').checked = false;
	}
}


function displayDirectDepositQuestion(resp){
	if(resp == 'CE' || resp == 'GC'){
		$('#directDepositQuestion').show();
	}else{
		$('#directDepositQuestion').hide();
		$('#bankDetailsSection').hide();
		$('#addressSection').hide();
		document.getElementById('paymentViaDirectDeposit_Y').checked = false;
		document.getElementById('paymentViaDirectDeposit_N').checked = false;
		document.getElementById('nameOfBank').value = '';
		document.getElementById('accountNumber').value = '';
		document.getElementById('bankRoutingNumber').value = '';
		document.getElementById('accountType_S').checked = false;
		document.getElementById('accountType_C').checked = false;
		document.getElementById('addressType_S').checked = false;
		document.getElementById('addressType_M').checked = false;
	}
	
}
function disableTextAreaOnload(val){
	if('Y' == val){
		document.getElementById('addtnInfo').setAttribute("disabled","disabled");
		document.getElementById('accountType_S').setAttribute("disabled","disabled");
		document.getElementById('accountType_C').setAttribute("disabled","disabled");
		document.getElementById('addressType_S').setAttribute("disabled","disabled");
		document.getElementById('addressType_M').setAttribute("disabled","disabled");
	}else{
		document.getElementById('addtnInfo').removeAttribute("disabled");
		document.getElementById('accountType_S').removeAttribute("disabled");
		document.getElementById('accountType_C').removeAttribute("disabled");
		document.getElementById('addressType_S').removeAttribute("disabled");
		document.getElementById('addressType_M').removeAttribute("disabled");
	}
}